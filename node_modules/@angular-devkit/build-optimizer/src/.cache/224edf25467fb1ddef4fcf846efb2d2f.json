{"remainingRequest":"/home/renu/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/renu/admin/node_modules/angular2-csv/Angular2-csv.js","dependencies":[{"path":"/home/renu/admin/node_modules/angular2-csv/Angular2-csv.js","mtime":1501536852000},{"path":"/home/renu/admin/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/renu/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["\"use strict\";\nexports.__esModule = true;\nvar CsvConfigConsts = /*@__PURE__*/ (function () {\n    function CsvConfigConsts() {\n    }\n    return CsvConfigConsts;\n}());\nCsvConfigConsts.EOL = \"\\r\\n\";\nCsvConfigConsts.BOM = \"\\ufeff\";\nCsvConfigConsts.DEFAULT_FIELD_SEPARATOR = ',';\nCsvConfigConsts.DEFAULT_DECIMAL_SEPARATOR = '.';\nCsvConfigConsts.DEFAULT_QUOTE = '\"';\nCsvConfigConsts.DEFAULT_SHOW_TITLE = false;\nCsvConfigConsts.DEFAULT_TITLE = 'My Report';\nCsvConfigConsts.DEFAULT_FILENAME = 'mycsv.csv';\nCsvConfigConsts.DEFAULT_SHOW_LABELS = false;\nCsvConfigConsts.DEFAULT_USE_BOM = true;\nCsvConfigConsts.DEFAULT_HEADER = [];\nexports.CsvConfigConsts = CsvConfigConsts;\nexports.ConfigDefaults = {\n    filename: CsvConfigConsts.DEFAULT_FILENAME,\n    fieldSeparator: CsvConfigConsts.DEFAULT_FIELD_SEPARATOR,\n    quoteStrings: CsvConfigConsts.DEFAULT_QUOTE,\n    decimalseparator: CsvConfigConsts.DEFAULT_DECIMAL_SEPARATOR,\n    showLabels: CsvConfigConsts.DEFAULT_SHOW_LABELS,\n    showTitle: CsvConfigConsts.DEFAULT_SHOW_TITLE,\n    title: CsvConfigConsts.DEFAULT_TITLE,\n    useBom: CsvConfigConsts.DEFAULT_USE_BOM,\n    headers: CsvConfigConsts.DEFAULT_HEADER\n};\nvar Angular2Csv = /*@__PURE__*/ (function () {\n    function Angular2Csv(DataJSON, filename, options) {\n        this.csv = \"\";\n        var config = options || {};\n        this.data = typeof DataJSON != 'object' ? JSON.parse(DataJSON) : DataJSON;\n        this._options = objectAssign({}, exports.ConfigDefaults, config);\n        if (this._options.filename) {\n            this._options.filename = filename;\n        }\n        this.generateCsv();\n    }\n    /**\n     * Generate and Download Csv\n     */\n    Angular2Csv.prototype.generateCsv = function () {\n        if (this._options.useBom) {\n            this.csv += CsvConfigConsts.BOM;\n        }\n        if (this._options.showTitle) {\n            this.csv += this._options.title + '\\r\\n\\n';\n        }\n        this.getHeaders();\n        this.getBody();\n        if (this.csv == '') {\n            console.log(\"Invalid data\");\n            return;\n        }\n        var blob = new Blob([this.csv], { \"type\": \"text/csv;charset=utf8;\" });\n        if (navigator.msSaveBlob) {\n            var filename = this._options.filename.replace(/ /g, \"_\") + \".csv\";\n            navigator.msSaveBlob(blob, filename);\n        }\n        else {\n            var uri = 'data:attachment/csv;charset=utf-8,' + encodeURI(this.csv);\n            var link = document.createElement(\"a\");\n            link.href = URL.createObjectURL(blob);\n            link.setAttribute('visibility', 'hidden');\n            link.download = this._options.filename.replace(/ /g, \"_\") + \".csv\";\n            document.body.appendChild(link);\n            link.click();\n            document.body.removeChild(link);\n        }\n    };\n    /**\n     * Create Headers\n     */\n    Angular2Csv.prototype.getHeaders = function () {\n        if (this._options.headers.length > 0) {\n            var row = \"\";\n            for (var _i = 0, _a = this._options.headers; _i < _a.length; _i++) {\n                var column = _a[_i];\n                row += column + this._options.fieldSeparator;\n            }\n            row = row.slice(0, -1);\n            this.csv += row + CsvConfigConsts.EOL;\n        }\n    };\n    /**\n     * Create Body\n     */\n    Angular2Csv.prototype.getBody = function () {\n        for (var i = 0; i < this.data.length; i++) {\n            var row = \"\";\n            for (var index in this.data[i]) {\n                row += this.formartData(this.data[i][index]) + this._options.fieldSeparator;\n                ;\n            }\n            row = row.slice(0, -1);\n            this.csv += row + CsvConfigConsts.EOL;\n        }\n    };\n    /**\n     * Format Data\n     * @param {any} data\n     */\n    Angular2Csv.prototype.formartData = function (data) {\n        if (this._options.decimalseparator === 'locale' && this.isFloat(data)) {\n            return data.toLocaleString();\n        }\n        if (this._options.decimalseparator !== '.' && this.isFloat(data)) {\n            return data.toString().replace('.', this._options.decimalseparator);\n        }\n        if (typeof data === 'string') {\n            data = data.replace(/\"/g, '\"\"');\n            if (this._options.quoteStrings || data.indexOf(',') > -1 || data.indexOf('\\n') > -1 || data.indexOf('\\r') > -1) {\n                data = this._options.quoteStrings + data + this._options.quoteStrings;\n            }\n            return data;\n        }\n        if (typeof data === 'boolean') {\n            return data ? 'TRUE' : 'FALSE';\n        }\n        return data;\n    };\n    /**\n     * Check if is Float\n     * @param {any} input\n     */\n    Angular2Csv.prototype.isFloat = function (input) {\n        return +input === input && (!isFinite(input) || Boolean(input % 1));\n    };\n    return Angular2Csv;\n}());\nexports.Angular2Csv = Angular2Csv;\nvar hasOwnProperty = Object.prototype.hasOwnProperty;\nvar propIsEnumerable = Object.prototype.propertyIsEnumerable;\n/**\n * Convet to Object\n * @param {any} val\n */\nfunction toObject(val) {\n    if (val === null || val === undefined) {\n        throw new TypeError('Object.assign cannot be called with null or undefined');\n    }\n    return Object(val);\n}\n/**\n * Assign data  to new Object\n * @param {any}   target\n * @param {any[]} ...source\n */\nfunction objectAssign(target) {\n    var source = [];\n    for (var _i = 1; _i < arguments.length; _i++) {\n        source[_i - 1] = arguments[_i];\n    }\n    var from;\n    var to = toObject(target);\n    var symbols;\n    for (var s = 1; s < arguments.length; s++) {\n        from = Object(arguments[s]);\n        for (var key in from) {\n            if (hasOwnProperty.call(from, key)) {\n                to[key] = from[key];\n            }\n        }\n        if (Object.getOwnPropertySymbols) {\n            symbols = Object.getOwnPropertySymbols(from);\n            for (var i = 0; i < symbols.length; i++) {\n                if (propIsEnumerable.call(from, symbols[i])) {\n                    to[symbols[i]] = from[symbols[i]];\n                }\n            }\n        }\n    }\n    return to;\n}\n",null]}