{"remainingRequest":"/home/renu/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/renu/admin/node_modules/ngx-webstorage/dist/helpers/webStorage.js","dependencies":[{"path":"/home/renu/admin/node_modules/ngx-webstorage/dist/helpers/webStorage.js","mtime":1512224934000},{"path":"/home/renu/admin/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/renu/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { STORAGE } from '../enums/storage';\nimport { StorageObserverHelper } from './storageObserver';\nimport { KeyStorageHelper } from './keyStorage';\nimport { MockStorageHelper } from './mockStorage';\nimport { STORAGE_NAMES } from '../constants/lib';\nvar CACHED = (_a = {}, _a[STORAGE.local] = {}, _a[STORAGE.session] = {}, _a);\nvar STORAGE_AVAILABILITY = (_b = {}, _b[STORAGE.local] = null, _b[STORAGE.session] = null, _b);\nvar WebStorageHelper = /*@__PURE__*/ (function () {\n    function WebStorageHelper() {\n    }\n    WebStorageHelper.store = function (sType, sKey, value) {\n        this.getStorage(sType).setItem(sKey, JSON.stringify(value));\n        CACHED[sType][sKey] = value;\n        StorageObserverHelper.emit(sType, sKey, value);\n    };\n    WebStorageHelper.retrieve = function (sType, sKey) {\n        if (sKey in CACHED[sType])\n            return CACHED[sType][sKey];\n        var value = WebStorageHelper.retrieveFromStorage(sType, sKey);\n        if (value !== null)\n            CACHED[sType][sKey] = value;\n        return value;\n    };\n    WebStorageHelper.retrieveFromStorage = function (sType, sKey) {\n        var data = null;\n        try {\n            data = JSON.parse(this.getStorage(sType).getItem(sKey));\n        }\n        catch (err) {\n            console.warn(\"invalid value for \" + sKey);\n        }\n        return data;\n    };\n    WebStorageHelper.refresh = function (sType, sKey) {\n        if (!KeyStorageHelper.isManagedKey(sKey))\n            return;\n        var value = WebStorageHelper.retrieveFromStorage(sType, sKey);\n        if (value === null) {\n            delete CACHED[sType][sKey];\n            StorageObserverHelper.emit(sType, sKey, null);\n        }\n        else if (value !== CACHED[sType][sKey]) {\n            CACHED[sType][sKey] = value;\n            StorageObserverHelper.emit(sType, sKey, value);\n        }\n    };\n    WebStorageHelper.refreshAll = function (sType) {\n        Object.keys(CACHED[sType]).forEach(function (sKey) { return WebStorageHelper.refresh(sType, sKey); });\n    };\n    WebStorageHelper.clearAll = function (sType) {\n        var storage = this.getStorage(sType);\n        KeyStorageHelper.retrieveKeysFromStorage(storage)\n            .forEach(function (sKey) {\n            storage.removeItem(sKey);\n            delete CACHED[sType][sKey];\n            StorageObserverHelper.emit(sType, sKey, null);\n        });\n    };\n    WebStorageHelper.clear = function (sType, sKey) {\n        this.getStorage(sType).removeItem(sKey);\n        delete CACHED[sType][sKey];\n        StorageObserverHelper.emit(sType, sKey, null);\n    };\n    WebStorageHelper.getStorage = function (sType) {\n        if (this.isStorageAvailable(sType))\n            return this.getWStorage(sType);\n        else\n            return MockStorageHelper.getStorage(sType);\n    };\n    WebStorageHelper.getWStorage = function (sType) {\n        var storage;\n        switch (sType) {\n            case STORAGE.local:\n                storage = localStorage;\n                break;\n            case STORAGE.session:\n                storage = sessionStorage;\n                break;\n            default:\n                throw Error('invalid storage type');\n        }\n        return storage;\n    };\n    WebStorageHelper.isStorageAvailable = function (sType) {\n        if (typeof STORAGE_AVAILABILITY[sType] === 'boolean')\n            return STORAGE_AVAILABILITY[sType];\n        var isAvailable = true, storage;\n        try {\n            storage = this.getWStorage(sType);\n            if (typeof storage === 'object') {\n                storage.setItem('test-storage', 'foobar');\n                storage.removeItem('test-storage');\n            }\n            else\n                isAvailable = false;\n        }\n        catch (e) {\n            isAvailable = false;\n        }\n        if (!isAvailable)\n            console.warn(STORAGE_NAMES[sType] + \" storage unavailable, Ng2Webstorage will use a fallback strategy instead\");\n        return STORAGE_AVAILABILITY[sType] = isAvailable;\n    };\n    return WebStorageHelper;\n}());\nexport { WebStorageHelper };\nvar _a, _b;\n//# sourceMappingURL=webStorage.js.map \n",null]}