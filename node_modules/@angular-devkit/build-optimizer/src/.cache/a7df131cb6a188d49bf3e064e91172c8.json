{"remainingRequest":"/home/renu/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/renu/admin/node_modules/angular2-cookie/services/cookies.service.js","dependencies":[{"path":"/home/renu/admin/node_modules/angular2-cookie/services/cookies.service.js","mtime":1482230177000},{"path":"/home/renu/admin/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/renu/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["/**\n * angular2-cookie - Implementation of Angular 1.x $cookies service to Angular 2\n * @version v1.2.6\n * @link https://github.com/salemdar/angular2-cookie#readme\n * @license MIT\n */\n\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nvar __param = /*@__PURE__*/ require(\"tslib\").__param;\nvar core_1 = require('@angular/core');\nvar base_cookie_options_1 = require('./base-cookie-options');\nvar CookieService = /*@__PURE__*/ (function () {\n    function CookieService(_defaultOptions) {\n        this._defaultOptions = _defaultOptions;\n    }\n    Object.defineProperty(CookieService.prototype, \"cookieString\", {\n        get: function () {\n            return document.cookie || '';\n        },\n        set: function (val) {\n            document.cookie = val;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @name CookieService#get\n     *\n     * @description\n     * Returns the value of given cookie key.\n     *\n     * @param {string} key Id to use for lookup.\n     * @returns {string} Raw cookie value.\n     */\n    CookieService.prototype.get = function (key) {\n        return this._cookieReader()[key];\n    };\n    /**\n     * @name CookieService#getObject\n     *\n     * @description\n     * Returns the deserialized value of given cookie key.\n     *\n     * @param {string} key Id to use for lookup.\n     * @returns {Object} Deserialized cookie value.\n     */\n    CookieService.prototype.getObject = function (key) {\n        var value = this.get(key);\n        return value ? JSON.parse(value) : value;\n    };\n    /**\n     * @name CookieService#getAll\n     *\n     * @description\n     * Returns a key value object with all the cookies.\n     *\n     * @returns {Object} All cookies\n     */\n    CookieService.prototype.getAll = function () {\n        return this._cookieReader();\n    };\n    /**\n     * @name CookieService#put\n     *\n     * @description\n     * Sets a value for given cookie key.\n     *\n     * @param {string} key Id for the `value`.\n     * @param {string} value Raw value to be stored.\n     * @param {CookieOptionsArgs} options (Optional) Options object.\n     */\n    CookieService.prototype.put = function (key, value, options) {\n        this._cookieWriter()(key, value, options);\n    };\n    /**\n     * @name CookieService#putObject\n     *\n     * @description\n     * Serializes and sets a value for given cookie key.\n     *\n     * @param {string} key Id for the `value`.\n     * @param {Object} value Value to be stored.\n     * @param {CookieOptionsArgs} options (Optional) Options object.\n     */\n    CookieService.prototype.putObject = function (key, value, options) {\n        this.put(key, JSON.stringify(value), options);\n    };\n    /**\n     * @name CookieService#remove\n     *\n     * @description\n     * Remove given cookie.\n     *\n     * @param {string} key Id of the key-value pair to delete.\n     * @param {CookieOptionsArgs} options (Optional) Options object.\n     */\n    CookieService.prototype.remove = function (key, options) {\n        this._cookieWriter()(key, undefined, options);\n    };\n    /**\n     * @name CookieService#removeAll\n     *\n     * @description\n     * Remove all cookies.\n     */\n    CookieService.prototype.removeAll = function () {\n        var _this = this;\n        var cookies = this.getAll();\n        Object.keys(cookies).forEach(function (key) {\n            _this.remove(key);\n        });\n    };\n    CookieService.prototype._cookieReader = function () {\n        var lastCookies = {};\n        var lastCookieString = '';\n        var that = this;\n        var cookieArray, cookie, i, index, name;\n        var currentCookieString = this.cookieString;\n        if (currentCookieString !== lastCookieString) {\n            lastCookieString = currentCookieString;\n            cookieArray = lastCookieString.split('; ');\n            lastCookies = {};\n            for (i = 0; i < cookieArray.length; i++) {\n                cookie = cookieArray[i];\n                index = cookie.indexOf('=');\n                if (index > 0) {\n                    name = that._safeDecodeURIComponent(cookie.substring(0, index));\n                    // the first value that is seen for a cookie is the most\n                    // specific one.  values for the same cookie name that\n                    // follow are for less specific paths.\n                    if (this.isBlank(lastCookies[name])) {\n                        lastCookies[name] = that._safeDecodeURIComponent(cookie.substring(index + 1));\n                    }\n                }\n            }\n        }\n        return lastCookies;\n    };\n    CookieService.prototype._cookieWriter = function () {\n        var that = this;\n        return function (name, value, options) {\n            that.cookieString = that._buildCookieString(name, value, options);\n        };\n    };\n    CookieService.prototype._safeDecodeURIComponent = function (str) {\n        try {\n            return decodeURIComponent(str);\n        }\n        catch (e) {\n            return str;\n        }\n    };\n    CookieService.prototype._buildCookieString = function (name, value, options) {\n        var cookiePath = '/';\n        var path, expires;\n        var defaultOpts = this._defaultOptions || new base_cookie_options_1.CookieOptions({ path: cookiePath });\n        var opts = this._mergeOptions(defaultOpts, options);\n        expires = opts.expires;\n        if (this.isBlank(value)) {\n            expires = 'Thu, 01 Jan 1970 00:00:00 GMT';\n            value = '';\n        }\n        if (this.isString(expires)) {\n            expires = new Date(expires);\n        }\n        var str = encodeURIComponent(name) + '=' + encodeURIComponent(value);\n        str += opts.path ? ';path=' + opts.path : '';\n        str += opts.domain ? ';domain=' + opts.domain : '';\n        str += expires ? ';expires=' + expires.toUTCString() : '';\n        str += opts.secure ? ';secure' : '';\n        // per http://www.ietf.org/rfc/rfc2109.txt browser must allow at minimum:\n        // - 300 cookies\n        // - 20 cookies per unique domain\n        // - 4096 bytes per cookie\n        var cookieLength = str.length + 1;\n        if (cookieLength > 4096) {\n            console.log(\"Cookie '\" + name + \"' possibly not set or overflowed because it was too \\n      large (\" + cookieLength + \" > 4096 bytes)!\");\n        }\n        return str;\n    };\n    CookieService.prototype._mergeOptions = function (defaultOpts, providedOpts) {\n        var newOpts = defaultOpts;\n        if (this.isPresent(providedOpts)) {\n            return newOpts.merge(new base_cookie_options_1.CookieOptions(providedOpts));\n        }\n        return newOpts;\n    };\n    CookieService.prototype.isBlank = function (obj) {\n        return obj === undefined || obj === null;\n    };\n    CookieService.prototype.isPresent = function (obj) {\n        return obj !== undefined && obj !== null;\n    };\n    CookieService.prototype.isString = function (obj) {\n        return typeof obj === 'string';\n    };\n    CookieService = __decorate([\n        core_1.Injectable(),\n        __param(0, core_1.Optional())\n    ], CookieService);\n    return CookieService;\n}());\nexports.CookieService = CookieService;\n",null]}