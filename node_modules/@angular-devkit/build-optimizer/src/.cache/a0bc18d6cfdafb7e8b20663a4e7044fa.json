{"remainingRequest":"/home/renu/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/renu/admin/node_modules/ng2-smart-table/lib/data-source/local/local.data-source.js","dependencies":[{"path":"/home/renu/admin/node_modules/ng2-smart-table/lib/data-source/local/local.data-source.js","mtime":1505225756000},{"path":"/home/renu/admin/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/renu/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { __extends } from \"tslib\";\nimport { LocalSorter } from './local.sorter';\nimport { LocalFilter } from './local.filter';\nimport { LocalPager } from './local.pager';\nimport { DataSource } from '../data-source';\nimport { deepExtend } from '../../helpers';\nvar LocalDataSource = /*@__PURE__*/ (function (_super) {\n    __extends(LocalDataSource, _super);\n    function LocalDataSource(data) {\n        if (data === void 0) {\n            data = [];\n        }\n        var _this = _super.call(this) || this;\n        _this.data = [];\n        _this.filteredAndSorted = [];\n        _this.sortConf = [];\n        _this.filterConf = {\n            filters: [],\n            andOperator: true,\n        };\n        _this.pagingConf = {};\n        _this.data = data;\n        return _this;\n    }\n    LocalDataSource.prototype.load = function (data) {\n        this.data = data;\n        return _super.prototype.load.call(this, data);\n    };\n    LocalDataSource.prototype.prepend = function (element) {\n        this.reset(true);\n        this.data.unshift(element);\n        return _super.prototype.prepend.call(this, element);\n    };\n    LocalDataSource.prototype.append = function (element) {\n        this.reset(true);\n        this.data.push(element);\n        return _super.prototype.append.call(this, element);\n    };\n    LocalDataSource.prototype.add = function (element) {\n        this.data.push(element);\n        return _super.prototype.add.call(this, element);\n    };\n    LocalDataSource.prototype.remove = function (element) {\n        this.data = this.data.filter(function (el) { return el !== element; });\n        return _super.prototype.remove.call(this, element);\n    };\n    LocalDataSource.prototype.update = function (element, values) {\n        var _this = this;\n        return new Promise(function (resolve, reject) {\n            _this.find(element).then(function (found) {\n                found = deepExtend(found, values);\n                _super.prototype.update.call(_this, found, values).then(resolve).catch(reject);\n            }).catch(reject);\n        });\n    };\n    LocalDataSource.prototype.find = function (element) {\n        var found = this.data.find(function (el) { return el === element; });\n        if (found) {\n            return Promise.resolve(found);\n        }\n        return Promise.reject(new Error('Element was not found in the dataset'));\n    };\n    LocalDataSource.prototype.getElements = function () {\n        var data = this.data.slice(0);\n        return Promise.resolve(this.prepareData(data));\n    };\n    LocalDataSource.prototype.getFilteredAndSorted = function () {\n        var data = this.data.slice(0);\n        this.prepareData(data);\n        return Promise.resolve(this.filteredAndSorted);\n    };\n    LocalDataSource.prototype.getAll = function () {\n        var data = this.data.slice(0);\n        return Promise.resolve(data);\n    };\n    LocalDataSource.prototype.reset = function (silent) {\n        if (silent === void 0) {\n            silent = false;\n        }\n        if (silent) {\n            this.filterConf = {\n                filters: [],\n                andOperator: true,\n            };\n            this.sortConf = [];\n            this.pagingConf['page'] = 1;\n        }\n        else {\n            this.setFilter([], true, false);\n            this.setSort([], false);\n            this.setPage(1);\n        }\n    };\n    LocalDataSource.prototype.empty = function () {\n        this.data = [];\n        return _super.prototype.empty.call(this);\n    };\n    LocalDataSource.prototype.count = function () {\n        return this.filteredAndSorted.length;\n    };\n    /**\n     *\n     * Array of conf objects\n     * [\n     *  {field: string, direction: asc|desc|null, compare: Function|null},\n     * ]\n     * @param conf\n     * @param doEmit\n     * @returns {LocalDataSource}\n     */\n    LocalDataSource.prototype.setSort = function (conf, doEmit) {\n        if (doEmit === void 0) {\n            doEmit = true;\n        }\n        if (conf !== null) {\n            conf.forEach(function (fieldConf) {\n                if (!fieldConf['field'] || typeof fieldConf['direction'] === 'undefined') {\n                    throw new Error('Sort configuration object is not valid');\n                }\n            });\n            this.sortConf = conf;\n        }\n        _super.prototype.setSort.call(this, conf, doEmit);\n        return this;\n    };\n    /**\n     *\n     * Array of conf objects\n     * [\n     *  {field: string, search: string, filter: Function|null},\n     * ]\n     * @param conf\n     * @param andOperator\n     * @param doEmit\n     * @returns {LocalDataSource}\n     */\n    LocalDataSource.prototype.setFilter = function (conf, andOperator, doEmit) {\n        var _this = this;\n        if (andOperator === void 0) {\n            andOperator = true;\n        }\n        if (doEmit === void 0) {\n            doEmit = true;\n        }\n        if (conf && conf.length > 0) {\n            conf.forEach(function (fieldConf) {\n                _this.addFilter(fieldConf, andOperator, false);\n            });\n        }\n        else {\n            this.filterConf = {\n                filters: [],\n                andOperator: true,\n            };\n        }\n        this.filterConf.andOperator = andOperator;\n        this.pagingConf['page'] = 1;\n        _super.prototype.setFilter.call(this, conf, andOperator, doEmit);\n        return this;\n    };\n    LocalDataSource.prototype.addFilter = function (fieldConf, andOperator, doEmit) {\n        var _this = this;\n        if (andOperator === void 0) {\n            andOperator = true;\n        }\n        if (doEmit === void 0) {\n            doEmit = true;\n        }\n        if (!fieldConf['field'] || typeof fieldConf['search'] === 'undefined') {\n            throw new Error('Filter configuration object is not valid');\n        }\n        var found = false;\n        this.filterConf.filters.forEach(function (currentFieldConf, index) {\n            if (currentFieldConf['field'] === fieldConf['field']) {\n                _this.filterConf.filters[index] = fieldConf;\n                found = true;\n            }\n        });\n        if (!found) {\n            this.filterConf.filters.push(fieldConf);\n        }\n        this.filterConf.andOperator = andOperator;\n        _super.prototype.addFilter.call(this, fieldConf, andOperator, doEmit);\n        return this;\n    };\n    LocalDataSource.prototype.setPaging = function (page, perPage, doEmit) {\n        if (doEmit === void 0) {\n            doEmit = true;\n        }\n        this.pagingConf['page'] = page;\n        this.pagingConf['perPage'] = perPage;\n        _super.prototype.setPaging.call(this, page, perPage, doEmit);\n        return this;\n    };\n    LocalDataSource.prototype.setPage = function (page, doEmit) {\n        if (doEmit === void 0) {\n            doEmit = true;\n        }\n        this.pagingConf['page'] = page;\n        _super.prototype.setPage.call(this, page, doEmit);\n        return this;\n    };\n    LocalDataSource.prototype.getSort = function () {\n        return this.sortConf;\n    };\n    LocalDataSource.prototype.getFilter = function () {\n        return this.filterConf;\n    };\n    LocalDataSource.prototype.getPaging = function () {\n        return this.pagingConf;\n    };\n    LocalDataSource.prototype.prepareData = function (data) {\n        data = this.filter(data);\n        data = this.sort(data);\n        this.filteredAndSorted = data.slice(0);\n        return this.paginate(data);\n    };\n    LocalDataSource.prototype.sort = function (data) {\n        if (this.sortConf) {\n            this.sortConf.forEach(function (fieldConf) {\n                data = LocalSorter\n                    .sort(data, fieldConf['field'], fieldConf['direction'], fieldConf['compare']);\n            });\n        }\n        return data;\n    };\n    // TODO: refactor?\n    LocalDataSource.prototype.filter = function (data) {\n        if (this.filterConf.filters) {\n            if (this.filterConf.andOperator) {\n                this.filterConf.filters.forEach(function (fieldConf) {\n                    if (fieldConf['search'].length > 0) {\n                        data = LocalFilter\n                            .filter(data, fieldConf['field'], fieldConf['search'], fieldConf['filter']);\n                    }\n                });\n            }\n            else {\n                var mergedData_1 = [];\n                this.filterConf.filters.forEach(function (fieldConf) {\n                    if (fieldConf['search'].length > 0) {\n                        mergedData_1 = mergedData_1.concat(LocalFilter\n                            .filter(data, fieldConf['field'], fieldConf['search'], fieldConf['filter']));\n                    }\n                });\n                // remove non unique items\n                data = mergedData_1.filter(function (elem, pos, arr) {\n                    return arr.indexOf(elem) === pos;\n                });\n            }\n        }\n        return data;\n    };\n    LocalDataSource.prototype.paginate = function (data) {\n        if (this.pagingConf && this.pagingConf['page'] && this.pagingConf['perPage']) {\n            data = LocalPager.paginate(data, this.pagingConf['page'], this.pagingConf['perPage']);\n        }\n        return data;\n    };\n    return LocalDataSource;\n}(DataSource));\nexport { LocalDataSource };\n//# sourceMappingURL=local.data-source.js.map \n",null]}