{"remainingRequest":"/home/renu/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/renu/admin/node_modules/ng2-date-picker/ng2-date-picker.es5.js","dependencies":[{"path":"/home/renu/admin/node_modules/ng2-date-picker/ng2-date-picker.es5.js","mtime":1517822706000},{"path":"/home/renu/admin/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/renu/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { ChangeDetectionStrategy, ChangeDetectorRef, Component, ComponentFactoryResolver, Directive, ElementRef, EventEmitter, HostBinding, HostListener, Injectable, Input, NgModule, Optional, Output, Renderer, ViewChild, ViewContainerRef, ViewEncapsulation, forwardRef } from '@angular/core';\nimport { FormsModule, NG_VALIDATORS, NG_VALUE_ACCESSOR, NgControl } from '@angular/forms';\nimport { CommonModule } from '@angular/common';\nimport * as momentNs from 'moment';\nvar ECalendarMode = /*@__PURE__*/ (function () {\n    var ECalendarMode = {};\n    ECalendarMode.Day = 0;\n    ECalendarMode.DayTime = 1;\n    ECalendarMode.Month = 2;\n    ECalendarMode.Time = 3;\n    ECalendarMode[ECalendarMode.Day] = \"Day\";\n    ECalendarMode[ECalendarMode.DayTime] = \"DayTime\";\n    ECalendarMode[ECalendarMode.Month] = \"Month\";\n    ECalendarMode[ECalendarMode.Time] = \"Time\";\n    return ECalendarMode;\n}());\nvar ECalendarValue = /*@__PURE__*/ (function () {\n    var ECalendarValue = {};\n    ECalendarValue.Moment = 1;\n    ECalendarValue.MomentArr = 2;\n    ECalendarValue.String = 3;\n    ECalendarValue.StringArr = 4;\n    ECalendarValue[ECalendarValue.Moment] = \"Moment\";\n    ECalendarValue[ECalendarValue.MomentArr] = \"MomentArr\";\n    ECalendarValue[ECalendarValue.String] = \"String\";\n    ECalendarValue[ECalendarValue.StringArr] = \"StringArr\";\n    return ECalendarValue;\n}());\nvar DomHelper = /*@__PURE__*/ (function () {\n    function DomHelper() {\n    }\n    /**\n     * @param {?} element\n     * @param {?} container\n     * @param {?} anchor\n     * @param {?} drops\n     * @return {?}\n     */\n    DomHelper.setYAxisPosition = function (element, container, anchor, drops) {\n        var /** @type {?} */ anchorRect = anchor.getBoundingClientRect();\n        var /** @type {?} */ containerRect = container.getBoundingClientRect();\n        var /** @type {?} */ bottom = anchorRect.bottom - containerRect.top;\n        var /** @type {?} */ top = anchorRect.top - containerRect.top;\n        if (drops === 'down') {\n            element.style.top = (bottom + 1 + 'px');\n        }\n        else {\n            element.style.top = (top - 1 - element.scrollHeight) + 'px';\n        }\n    };\n    /**\n     * @param {?} element\n     * @param {?} container\n     * @param {?} anchor\n     * @param {?} dimElem\n     * @param {?} opens\n     * @return {?}\n     */\n    DomHelper.setXAxisPosition = function (element, container, anchor, dimElem, opens) {\n        var /** @type {?} */ anchorRect = anchor.getBoundingClientRect();\n        var /** @type {?} */ containerRect = container.getBoundingClientRect();\n        var /** @type {?} */ left = anchorRect.left - containerRect.left;\n        if (opens === 'right') {\n            element.style.left = left + 'px';\n        }\n        else {\n            element.style.left = left - dimElem.offsetWidth + anchor.offsetWidth + 'px';\n        }\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    DomHelper.isTopInView = function (el) {\n        var top = el.getBoundingClientRect().top;\n        return (top >= 0);\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    DomHelper.isBottomInView = function (el) {\n        var bottom = el.getBoundingClientRect().bottom;\n        return (bottom <= window.innerHeight);\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    DomHelper.isLeftInView = function (el) {\n        var left = el.getBoundingClientRect().left;\n        return (left >= 0);\n    };\n    /**\n     * @param {?} el\n     * @return {?}\n     */\n    DomHelper.isRightInView = function (el) {\n        var right = el.getBoundingClientRect().right;\n        return (right <= window.innerWidth);\n    };\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    DomHelper.prototype.appendElementToPosition = function (config) {\n        var _this = this;\n        var container = config.container, element = config.element;\n        if (!container.style.position || container.style.position === 'static') {\n            container.style.position = 'relative';\n        }\n        if (element.style.position !== 'absolute') {\n            element.style.position = 'absolute';\n        }\n        element.style.visibility = 'hidden';\n        setTimeout(function () {\n            _this.setElementPosition(config);\n            element.style.visibility = 'visible';\n        });\n    };\n    /**\n     * @param {?} __0\n     * @return {?}\n     */\n    DomHelper.prototype.setElementPosition = function (_a) {\n        var element = _a.element, container = _a.container, anchor = _a.anchor, dimElem = _a.dimElem, drops = _a.drops, opens = _a.opens;\n        DomHelper.setYAxisPosition(element, container, anchor, 'down');\n        DomHelper.setXAxisPosition(element, container, anchor, dimElem, 'right');\n        if (drops !== 'down' && drops !== 'up') {\n            if (DomHelper.isBottomInView(dimElem)) {\n                DomHelper.setYAxisPosition(element, container, anchor, 'down');\n            }\n            else if (DomHelper.isTopInView(dimElem)) {\n                DomHelper.setYAxisPosition(element, container, anchor, 'up');\n            }\n        }\n        else {\n            DomHelper.setYAxisPosition(element, container, anchor, drops);\n        }\n        if (opens !== 'left' && opens !== 'right') {\n            if (DomHelper.isRightInView(dimElem)) {\n                DomHelper.setXAxisPosition(element, container, anchor, dimElem, 'right');\n            }\n            else if (DomHelper.isLeftInView(dimElem)) {\n                DomHelper.setXAxisPosition(element, container, anchor, dimElem, 'left');\n            }\n        }\n        else {\n            DomHelper.setXAxisPosition(element, container, anchor, dimElem, opens);\n        }\n    };\n    return DomHelper;\n}());\nvar moment = momentNs;\nvar UtilsService = /*@__PURE__*/ (function () {\n    function UtilsService() {\n    }\n    /**\n     * @param {?} func\n     * @param {?} wait\n     * @return {?}\n     */\n    UtilsService.debounce = function (func, wait) {\n        var /** @type {?} */ timeout;\n        return function () {\n            var /** @type {?} */ context = this, /** @type {?} */ args = arguments;\n            timeout = clearTimeout(timeout);\n            setTimeout(function () {\n                func.apply(context, args);\n            }, wait);\n        };\n    };\n    ;\n    /**\n     * @param {?} size\n     * @return {?}\n     */\n    UtilsService.prototype.createArray = function (size) {\n        return new Array(size).fill(1);\n    };\n    /**\n     * @param {?} date\n     * @param {?} format\n     * @return {?}\n     */\n    UtilsService.prototype.convertToMoment = function (date, format) {\n        if (!date) {\n            return null;\n        }\n        else if (typeof date === 'string') {\n            return moment(date, format);\n        }\n        else {\n            return date.clone();\n        }\n    };\n    /**\n     * @param {?} date\n     * @param {?} format\n     * @return {?}\n     */\n    UtilsService.prototype.isDateValid = function (date, format) {\n        if (date === '') {\n            return true;\n        }\n        return moment(date, format, true).isValid();\n    };\n    /**\n     * @param {?} current\n     * @param {?} selected\n     * @param {?} allowMultiSelect\n     * @param {?} minDate\n     * @return {?}\n     */\n    UtilsService.prototype.getDefaultDisplayDate = function (current, selected, allowMultiSelect, minDate) {\n        if (current) {\n            return current.clone();\n        }\n        else if (minDate && minDate.isAfter(moment())) {\n            return minDate.clone();\n        }\n        else if (allowMultiSelect) {\n            if (selected && selected[selected.length]) {\n                return selected[selected.length].clone();\n            }\n        }\n        else if (selected && selected[0]) {\n            return selected[0].clone();\n        }\n        return moment();\n    };\n    /**\n     * @param {?} value\n     * @param {?} allowMultiSelect\n     * @return {?}\n     */\n    UtilsService.prototype.getInputType = function (value, allowMultiSelect) {\n        if (Array.isArray(value)) {\n            if (!value.length) {\n                return ECalendarValue.MomentArr;\n            }\n            else if (typeof value[0] === 'string') {\n                return ECalendarValue.StringArr;\n            }\n            else if (moment.isMoment(value[0])) {\n                return ECalendarValue.MomentArr;\n            }\n        }\n        else {\n            if (typeof value === 'string') {\n                return ECalendarValue.String;\n            }\n            else if (moment.isMoment(value)) {\n                return ECalendarValue.Moment;\n            }\n        }\n        return allowMultiSelect ? ECalendarValue.MomentArr : ECalendarValue.Moment;\n    };\n    /**\n     * @param {?} value\n     * @param {?} format\n     * @param {?} allowMultiSelect\n     * @return {?}\n     */\n    UtilsService.prototype.convertToMomentArray = function (value, format, allowMultiSelect) {\n        switch (this.getInputType(value, allowMultiSelect)) {\n            case (ECalendarValue.String):\n                return value ? [moment(/** @type {?} */ (value), format, true)] : [];\n            case (ECalendarValue.StringArr):\n                return ((value)).map(function (v) { return v ? moment(v, format, true) : null; }).filter(Boolean);\n            case (ECalendarValue.Moment):\n                return value ? [((value)).clone()] : [];\n            case (ECalendarValue.MomentArr):\n                return ((value) || []).map(function (v) { return v.clone(); });\n            default:\n                return [];\n        }\n    };\n    /**\n     * @param {?} format\n     * @param {?} value\n     * @param {?} convertTo\n     * @return {?}\n     */\n    UtilsService.prototype.convertFromMomentArray = function (format, value, convertTo) {\n        switch (convertTo) {\n            case (ECalendarValue.String):\n                return value[0] && value[0].format(format);\n            case (ECalendarValue.StringArr):\n                return value.filter(Boolean).map(function (v) { return v.format(format); });\n            case (ECalendarValue.Moment):\n                return value[0] ? value[0].clone() : value[0];\n            case (ECalendarValue.MomentArr):\n                return value ? value.map(function (v) { return v.clone(); }) : value;\n            default:\n                return value;\n        }\n    };\n    /**\n     * @template T\n     * @param {?} obj\n     * @return {?}\n     */\n    UtilsService.prototype.clearUndefined = function (obj) {\n        if (!obj) {\n            return obj;\n        }\n        Object.keys(obj).forEach(function (key) { return (obj[key] === undefined) && delete obj[key]; });\n        return obj;\n    };\n    /**\n     * @param {?} isMultiple\n     * @param {?} currentlySelected\n     * @param {?} date\n     * @param {?=} granularity\n     * @return {?}\n     */\n    UtilsService.prototype.updateSelected = function (isMultiple, currentlySelected, date, granularity) {\n        if (granularity === void 0) {\n            granularity = 'day';\n        }\n        var /** @type {?} */ isSelected = !date.selected;\n        if (isMultiple) {\n            return isSelected\n                ? currentlySelected.concat([date.date])\n                : currentlySelected.filter(function (d) { return !d.isSame(date.date, granularity); });\n        }\n        else {\n            return isSelected ? [date.date] : [];\n        }\n    };\n    /**\n     * @param {?} element\n     * @param {?} selector\n     * @return {?}\n     */\n    UtilsService.prototype.closestParent = function (element, selector) {\n        if (!element) {\n            return undefined;\n        }\n        var /** @type {?} */ match = (element.querySelector(selector));\n        return match || this.closestParent(element.parentElement, selector);\n    };\n    /**\n     * @param {?} m\n     * @return {?}\n     */\n    UtilsService.prototype.onlyTime = function (m) {\n        return m && moment.isMoment(m) && moment(m.format('HH:mm:ss'), 'HH:mm:ss');\n    };\n    /**\n     * @param {?} calendarType\n     * @return {?}\n     */\n    UtilsService.prototype.granularityFromType = function (calendarType) {\n        switch (calendarType) {\n            case 'time':\n                return 'second';\n            case 'daytime':\n                return 'second';\n            default:\n                return calendarType;\n        }\n    };\n    /**\n     * @param {?} __0\n     * @param {?} format\n     * @param {?} calendarType\n     * @return {?}\n     */\n    UtilsService.prototype.createValidator = function (_a, format, calendarType) {\n        var _this = this;\n        var minDate = _a.minDate, maxDate = _a.maxDate, minTime = _a.minTime, maxTime = _a.maxTime;\n        var /** @type {?} */ isValid;\n        var /** @type {?} */ value;\n        var /** @type {?} */ validators = [];\n        var /** @type {?} */ granularity = this.granularityFromType(calendarType);\n        if (minDate) {\n            var /** @type {?} */ md_1 = this.convertToMoment(minDate, format);\n            validators.push({\n                key: 'minDate',\n                isValid: function () {\n                    var /** @type {?} */ _isValid = value.every(function (val) { return val.isSameOrAfter(md_1, granularity); });\n                    isValid = isValid ? _isValid : false;\n                    return _isValid;\n                }\n            });\n        }\n        if (maxDate) {\n            var /** @type {?} */ md_2 = this.convertToMoment(maxDate, format);\n            validators.push({\n                key: 'maxDate',\n                isValid: function () {\n                    var /** @type {?} */ _isValid = value.every(function (val) { return val.isSameOrBefore(md_2, granularity); });\n                    isValid = isValid ? _isValid : false;\n                    return _isValid;\n                }\n            });\n        }\n        if (minTime) {\n            var /** @type {?} */ md_3 = this.onlyTime(this.convertToMoment(minTime, format));\n            validators.push({\n                key: 'minTime',\n                isValid: function () {\n                    var /** @type {?} */ _isValid = value.every(function (val) { return _this.onlyTime(val).isSameOrAfter(md_3); });\n                    isValid = isValid ? _isValid : false;\n                    return _isValid;\n                }\n            });\n        }\n        if (maxTime) {\n            var /** @type {?} */ md_4 = this.onlyTime(this.convertToMoment(maxTime, format));\n            validators.push({\n                key: 'maxTime',\n                isValid: function () {\n                    var /** @type {?} */ _isValid = value.every(function (val) { return _this.onlyTime(val).isSameOrBefore(md_4); });\n                    isValid = isValid ? _isValid : false;\n                    return _isValid;\n                }\n            });\n        }\n        return function (inputVal) {\n            isValid = true;\n            value = _this.convertToMomentArray(inputVal, format, true).filter(Boolean);\n            if (!value.every(function (val) { return val.isValid(); })) {\n                return {\n                    format: {\n                        given: inputVal\n                    }\n                };\n            }\n            var /** @type {?} */ errors = validators.reduce(function (map, err) {\n                if (!err.isValid()) {\n                    map[err.key] = {\n                        given: value\n                    };\n                }\n                return map;\n            }, {});\n            return !isValid ? errors : null;\n        };\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    UtilsService.prototype.datesStringToStringArray = function (value) {\n        return (value || '').split('|').map(function (m) { return m.trim(); }).filter(Boolean);\n    };\n    /**\n     * @param {?} value\n     * @param {?} format\n     * @return {?}\n     */\n    UtilsService.prototype.getValidMomentArray = function (value, format) {\n        var _this = this;\n        return this.datesStringToStringArray(value)\n            .filter(function (d) { return _this.isDateValid(d, format); })\n            .map(function (d) { return moment(d, format); });\n    };\n    /**\n     * @param {?} showGoToCurrent\n     * @param {?} mode\n     * @param {?} min\n     * @param {?} max\n     * @return {?}\n     */\n    UtilsService.prototype.shouldShowCurrent = function (showGoToCurrent, mode, min, max) {\n        return showGoToCurrent &&\n            mode !== 'time' &&\n            this.isDateInRange(moment(), min, max);\n    };\n    /**\n     * @param {?} date\n     * @param {?} from\n     * @param {?} to\n     * @return {?}\n     */\n    UtilsService.prototype.isDateInRange = function (date, from, to) {\n        return date.isBetween(from, to, 'day', '[]');\n    };\n    /**\n     * @param {?} obj\n     * @param {?} format\n     * @param {?} props\n     * @return {?}\n     */\n    UtilsService.prototype.convertPropsToMoment = function (obj, format, props) {\n        var _this = this;\n        props.forEach(function (prop) {\n            if (obj.hasOwnProperty(prop)) {\n                obj[prop] = _this.convertToMoment(obj[prop], format);\n            }\n        });\n    };\n    /**\n     * @template T\n     * @param {?} prevConf\n     * @param {?} currentConf\n     * @return {?}\n     */\n    UtilsService.prototype.shouldResetCurrentView = function (prevConf, currentConf) {\n        if (prevConf && currentConf) {\n            if (!prevConf.min && currentConf.min) {\n                return true;\n            }\n            else if (prevConf.min && currentConf.min && !prevConf.min.isSame(currentConf.min, 'd')) {\n                return true;\n            }\n            else if (!prevConf.max && currentConf.max) {\n                return true;\n            }\n            else if (prevConf.max && currentConf.max && !prevConf.max.isSame(currentConf.max, 'd')) {\n                return true;\n            }\n            return false;\n        }\n        return false;\n    };\n    return UtilsService;\n}());\nvar moment$1 = momentNs;\nvar DayCalendarService = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} utilsService\n     */\n    function DayCalendarService(utilsService) {\n        this.utilsService = utilsService;\n        this.DAYS = ['su', 'mo', 'tu', 'we', 'th', 'fr', 'sa'];\n        this.DEFAULT_CONFIG = {\n            showNearMonthDays: true,\n            showWeekNumbers: false,\n            firstDayOfWeek: 'su',\n            weekDayFormat: 'ddd',\n            format: 'DD-MM-YYYY',\n            allowMultiSelect: false,\n            monthFormat: 'MMM, YYYY',\n            enableMonthSelector: true,\n            locale: moment$1.locale(),\n            dayBtnFormat: 'DD',\n            unSelectOnClick: true\n        };\n    }\n    /**\n     * @param {?} currentMonth\n     * @param {?} monthArray\n     * @return {?}\n     */\n    DayCalendarService.prototype.removeNearMonthWeeks = function (currentMonth, monthArray) {\n        if (monthArray[monthArray.length - 1].find(function (day) { return day.date.isSame(currentMonth, 'month'); })) {\n            return monthArray;\n        }\n        else {\n            return monthArray.slice(0, -1);\n        }\n    };\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    DayCalendarService.prototype.getConfig = function (config) {\n        var /** @type {?} */ _config = (Object.assign({}, this.DEFAULT_CONFIG, this.utilsService.clearUndefined(config)));\n        this.utilsService.convertPropsToMoment(_config, _config.format, ['min', 'max']);\n        moment$1.locale(_config.locale);\n        return _config;\n    };\n    /**\n     * @param {?} firstDayOfWeek\n     * @return {?}\n     */\n    DayCalendarService.prototype.generateDaysMap = function (firstDayOfWeek) {\n        var /** @type {?} */ firstDayIndex = this.DAYS.indexOf(firstDayOfWeek);\n        var /** @type {?} */ daysArr = this.DAYS.slice(firstDayIndex, 7).concat(this.DAYS.slice(0, firstDayIndex));\n        return daysArr.reduce(function (map, day, index) {\n            map[day] = index;\n            return map;\n        }, /** @type {?} */ ({}));\n    };\n    /**\n     * @param {?} config\n     * @param {?} month\n     * @param {?} selected\n     * @return {?}\n     */\n    DayCalendarService.prototype.generateMonthArray = function (config, month, selected) {\n        var _this = this;\n        var /** @type {?} */ monthArray = [];\n        var /** @type {?} */ firstDayOfWeekIndex = this.DAYS.indexOf(config.firstDayOfWeek);\n        var /** @type {?} */ firstDayOfBoard = month.clone().startOf('month');\n        while (firstDayOfBoard.day() !== firstDayOfWeekIndex) {\n            firstDayOfBoard.subtract(1, 'day');\n        }\n        var /** @type {?} */ current = firstDayOfBoard.clone();\n        var /** @type {?} */ prevMonth = month.clone().subtract(1, 'month');\n        var /** @type {?} */ nextMonth = month.clone().add(1, 'month');\n        var /** @type {?} */ today = moment$1();\n        var /** @type {?} */ daysOfCalendar = this.utilsService.createArray(42)\n            .reduce(function (array) {\n            array.push({\n                date: current.clone(),\n                selected: !!selected.find(function (selectedDay) { return current.isSame(selectedDay, 'day'); }),\n                currentMonth: current.isSame(month, 'month'),\n                prevMonth: current.isSame(prevMonth, 'month'),\n                nextMonth: current.isSame(nextMonth, 'month'),\n                currentDay: current.isSame(today, 'day'),\n                disabled: _this.isDateDisabled(current, config)\n            });\n            current.add(1, 'day');\n            if (current.format('HH') !== '00') {\n                current.startOf('day').add(1, 'day');\n            }\n            return array;\n        }, []);\n        daysOfCalendar.forEach(function (day, index) {\n            var /** @type {?} */ weekIndex = Math.floor(index / 7);\n            if (!monthArray[weekIndex]) {\n                monthArray.push([]);\n            }\n            monthArray[weekIndex].push(day);\n        });\n        if (!config.showNearMonthDays) {\n            monthArray = this.removeNearMonthWeeks(month, monthArray);\n        }\n        return monthArray;\n    };\n    /**\n     * @param {?} firstDayOfWeek\n     * @return {?}\n     */\n    DayCalendarService.prototype.generateWeekdays = function (firstDayOfWeek) {\n        var /** @type {?} */ weekdayNames = {\n            su: moment$1().day(0),\n            mo: moment$1().day(1),\n            tu: moment$1().day(2),\n            we: moment$1().day(3),\n            th: moment$1().day(4),\n            fr: moment$1().day(5),\n            sa: moment$1().day(6)\n        };\n        var /** @type {?} */ weekdays = [];\n        var /** @type {?} */ daysMap = this.generateDaysMap(firstDayOfWeek);\n        for (var /** @type {?} */ dayKey in daysMap) {\n            if (daysMap.hasOwnProperty(dayKey)) {\n                weekdays[daysMap[dayKey]] = weekdayNames[dayKey];\n            }\n        }\n        return weekdays;\n    };\n    /**\n     * @param {?} date\n     * @param {?} config\n     * @return {?}\n     */\n    DayCalendarService.prototype.isDateDisabled = function (date, config) {\n        if (config.isDayDisabledCallback) {\n            return config.isDayDisabledCallback(date);\n        }\n        if (config.min && date.isBefore(config.min, 'day')) {\n            return true;\n        }\n        return !!(config.max && date.isAfter(config.max, 'day'));\n    };\n    /**\n     * @param {?} config\n     * @param {?} month\n     * @return {?}\n     */\n    DayCalendarService.prototype.getHeaderLabel = function (config, month) {\n        if (config.monthFormatter) {\n            return config.monthFormatter(month);\n        }\n        return month.format(config.monthFormat);\n    };\n    /**\n     * @param {?} min\n     * @param {?} currentMonthView\n     * @return {?}\n     */\n    DayCalendarService.prototype.shouldShowLeft = function (min, currentMonthView) {\n        return min ? min.isBefore(currentMonthView, 'month') : true;\n    };\n    /**\n     * @param {?} max\n     * @param {?} currentMonthView\n     * @return {?}\n     */\n    DayCalendarService.prototype.shouldShowRight = function (max, currentMonthView) {\n        return max ? max.isAfter(currentMonthView, 'month') : true;\n    };\n    /**\n     * @param {?} firstDayOfWeek\n     * @return {?}\n     */\n    DayCalendarService.prototype.generateDaysIndexMap = function (firstDayOfWeek) {\n        var /** @type {?} */ firstDayIndex = this.DAYS.indexOf(firstDayOfWeek);\n        var /** @type {?} */ daysArr = this.DAYS.slice(firstDayIndex, 7).concat(this.DAYS.slice(0, firstDayIndex));\n        return daysArr.reduce(function (map, day, index) {\n            map[index] = day;\n            return map;\n        }, /** @type {?} */ ({}));\n    };\n    /**\n     * @param {?} componentConfig\n     * @return {?}\n     */\n    DayCalendarService.prototype.getMonthCalendarConfig = function (componentConfig) {\n        return this.utilsService.clearUndefined({\n            min: componentConfig.min,\n            max: componentConfig.max,\n            format: componentConfig.format,\n            isNavHeaderBtnClickable: true,\n            allowMultiSelect: false,\n            yearFormat: componentConfig.yearFormat,\n            yearFormatter: componentConfig.yearFormatter,\n            monthBtnFormat: componentConfig.monthBtnFormat,\n            monthBtnFormatter: componentConfig.monthBtnFormatter,\n            monthBtnCssClassCallback: componentConfig.monthBtnCssClassCallback,\n            multipleYearsNavigateBy: componentConfig.multipleYearsNavigateBy,\n            showMultipleYearsNavigation: componentConfig.showMultipleYearsNavigation,\n            showGoToCurrent: componentConfig.showGoToCurrent\n        });\n    };\n    /**\n     * @param {?} config\n     * @param {?} day\n     * @return {?}\n     */\n    DayCalendarService.prototype.getDayBtnText = function (config, day) {\n        if (config.dayBtnFormatter) {\n            return config.dayBtnFormatter(day);\n        }\n        return day.format(config.dayBtnFormat);\n    };\n    /**\n     * @param {?} config\n     * @param {?} day\n     * @return {?}\n     */\n    DayCalendarService.prototype.getDayBtnCssClass = function (config, day) {\n        if (config.dayBtnCssClassCallback) {\n            return config.dayBtnCssClassCallback(day);\n        }\n        return '';\n    };\n    return DayCalendarService;\n}());\nvar moment$3 = momentNs;\nvar FIRST_PM_HOUR = 12;\nvar TimeSelectService = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} utilsService\n     */\n    function TimeSelectService(utilsService) {\n        this.utilsService = utilsService;\n        this.DEFAULT_CONFIG = {\n            hours12Format: 'hh',\n            hours24Format: 'HH',\n            meridiemFormat: 'A',\n            minutesFormat: 'mm',\n            minutesInterval: 1,\n            secondsFormat: 'ss',\n            secondsInterval: 1,\n            showSeconds: false,\n            showTwentyFourHours: false,\n            timeSeparator: ':',\n            locale: moment$3.locale()\n        };\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    TimeSelectService.prototype.getConfig = function (config) {\n        var /** @type {?} */ timeConfigs = {\n            maxTime: this.utilsService.onlyTime(config && config.maxTime),\n            minTime: this.utilsService.onlyTime(config && config.minTime)\n        };\n        var /** @type {?} */ _config = (Object.assign({}, this.DEFAULT_CONFIG, this.utilsService.clearUndefined(config), timeConfigs));\n        moment$3.locale(_config.locale);\n        return _config;\n    };\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    TimeSelectService.prototype.getTimeFormat = function (config) {\n        return (config.showTwentyFourHours ? config.hours24Format : config.hours12Format)\n            + config.timeSeparator + config.minutesFormat\n            + (config.showSeconds ? (config.timeSeparator + config.secondsFormat) : '')\n            + (config.showTwentyFourHours ? '' : ' ' + config.meridiemFormat);\n    };\n    /**\n     * @param {?} config\n     * @param {?} t\n     * @return {?}\n     */\n    TimeSelectService.prototype.getHours = function (config, t) {\n        var /** @type {?} */ time = t || moment$3();\n        return time && time.format(config.showTwentyFourHours ? config.hours24Format : config.hours12Format);\n    };\n    /**\n     * @param {?} config\n     * @param {?} t\n     * @return {?}\n     */\n    TimeSelectService.prototype.getMinutes = function (config, t) {\n        var /** @type {?} */ time = t || moment$3();\n        return time && time.format(config.minutesFormat);\n    };\n    /**\n     * @param {?} config\n     * @param {?} t\n     * @return {?}\n     */\n    TimeSelectService.prototype.getSeconds = function (config, t) {\n        var /** @type {?} */ time = t || moment$3();\n        return time && time.format(config.secondsFormat);\n    };\n    /**\n     * @param {?} config\n     * @param {?} time\n     * @return {?}\n     */\n    TimeSelectService.prototype.getMeridiem = function (config, time) {\n        return time && time.format(config.meridiemFormat);\n    };\n    /**\n     * @param {?} config\n     * @param {?} time\n     * @param {?} unit\n     * @return {?}\n     */\n    TimeSelectService.prototype.decrease = function (config, time, unit) {\n        var /** @type {?} */ amount = 1;\n        switch (unit) {\n            case 'minute':\n                amount = config.minutesInterval;\n                break;\n            case 'second':\n                amount = config.secondsInterval;\n                break;\n        }\n        return time.clone().subtract(amount, unit);\n    };\n    /**\n     * @param {?} config\n     * @param {?} time\n     * @param {?} unit\n     * @return {?}\n     */\n    TimeSelectService.prototype.increase = function (config, time, unit) {\n        var /** @type {?} */ amount = 1;\n        switch (unit) {\n            case 'minute':\n                amount = config.minutesInterval;\n                break;\n            case 'second':\n                amount = config.secondsInterval;\n                break;\n        }\n        return time.clone().add(amount, unit);\n    };\n    /**\n     * @param {?} time\n     * @return {?}\n     */\n    TimeSelectService.prototype.toggleMeridiem = function (time) {\n        if (time.hours() < FIRST_PM_HOUR) {\n            return time.clone().add(12, 'hour');\n        }\n        else {\n            return time.clone().subtract(12, 'hour');\n        }\n    };\n    /**\n     * @param {?} config\n     * @param {?} time\n     * @param {?} unit\n     * @return {?}\n     */\n    TimeSelectService.prototype.shouldShowDecrease = function (config, time, unit) {\n        if (!config.min && !config.minTime) {\n            return true;\n        }\n        var /** @type {?} */ newTime = this.decrease(config, time, unit);\n        return (!config.min || config.min.isSameOrBefore(newTime))\n            && (!config.minTime || config.minTime.isSameOrBefore(this.utilsService.onlyTime(newTime)));\n    };\n    /**\n     * @param {?} config\n     * @param {?} time\n     * @param {?} unit\n     * @return {?}\n     */\n    TimeSelectService.prototype.shouldShowIncrease = function (config, time, unit) {\n        if (!config.max && !config.maxTime) {\n            return true;\n        }\n        var /** @type {?} */ newTime = this.increase(config, time, unit);\n        return (!config.max || config.max.isSameOrAfter(newTime))\n            && (!config.maxTime || config.maxTime.isSameOrAfter(this.utilsService.onlyTime(newTime)));\n    };\n    /**\n     * @param {?} config\n     * @param {?} time\n     * @return {?}\n     */\n    TimeSelectService.prototype.shouldShowToggleMeridiem = function (config, time) {\n        if (!config.min && !config.max && !config.minTime && !config.maxTime) {\n            return true;\n        }\n        var /** @type {?} */ newTime = this.toggleMeridiem(time);\n        return (!config.max || config.max.isSameOrAfter(newTime))\n            && (!config.min || config.min.isSameOrBefore(newTime))\n            && (!config.maxTime || config.maxTime.isSameOrAfter(this.utilsService.onlyTime(newTime)))\n            && (!config.minTime || config.minTime.isSameOrBefore(this.utilsService.onlyTime(newTime)));\n    };\n    return TimeSelectService;\n}());\nvar moment$2 = momentNs;\nvar DAY_FORMAT = 'YYYYMMDD';\nvar TIME_FORMAT = 'HH:mm:ss';\nvar COMBINED_FORMAT = DAY_FORMAT + TIME_FORMAT;\nvar DayTimeCalendarService = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} utilsService\n     * @param {?} dayCalendarService\n     * @param {?} timeSelectService\n     */\n    function DayTimeCalendarService(utilsService, dayCalendarService, timeSelectService) {\n        this.utilsService = utilsService;\n        this.dayCalendarService = dayCalendarService;\n        this.timeSelectService = timeSelectService;\n        this.DEFAULT_CONFIG = {\n            locale: moment$2.locale()\n        };\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    DayTimeCalendarService.prototype.getConfig = function (config) {\n        var /** @type {?} */ _config = Object.assign({}, this.DEFAULT_CONFIG, this.timeSelectService.getConfig(config), this.dayCalendarService.getConfig(config));\n        moment$2.locale(config.locale);\n        return _config;\n    };\n    /**\n     * @param {?} current\n     * @param {?} day\n     * @param {?} config\n     * @return {?}\n     */\n    DayTimeCalendarService.prototype.updateDay = function (current, day, config) {\n        var /** @type {?} */ time = current ? current : moment$2();\n        var /** @type {?} */ updated = moment$2(day.format(DAY_FORMAT) + time.format(TIME_FORMAT), COMBINED_FORMAT);\n        if (config.min) {\n            var /** @type {?} */ min = (config.min);\n            updated = min.isAfter(updated) ? min : updated;\n        }\n        if (config.max) {\n            var /** @type {?} */ max = (config.max);\n            updated = max.isBefore(updated) ? max : updated;\n        }\n        return updated;\n    };\n    /**\n     * @param {?} current\n     * @param {?} time\n     * @return {?}\n     */\n    DayTimeCalendarService.prototype.updateTime = function (current, time) {\n        var /** @type {?} */ day = current ? current : moment$2();\n        return moment$2(day.format(DAY_FORMAT) + time.format(TIME_FORMAT), COMBINED_FORMAT);\n    };\n    return DayTimeCalendarService;\n}());\nvar moment$4 = momentNs;\nvar DatePickerService = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} utilsService\n     * @param {?} timeSelectService\n     * @param {?} daytimeCalendarService\n     */\n    function DatePickerService(utilsService, timeSelectService, daytimeCalendarService) {\n        this.utilsService = utilsService;\n        this.timeSelectService = timeSelectService;\n        this.daytimeCalendarService = daytimeCalendarService;\n        this.onPickerClosed = new EventEmitter();\n        this.defaultConfig = {\n            closeOnSelect: true,\n            closeOnSelectDelay: 100,\n            format: 'DD-MM-YYYY',\n            openOnFocus: true,\n            openOnClick: true,\n            onOpenDelay: 0,\n            disableKeypress: false,\n            showNearMonthDays: true,\n            showWeekNumbers: false,\n            enableMonthSelector: true,\n            showGoToCurrent: true,\n            locale: moment$4.locale()\n        };\n    }\n    /**\n     * @param {?} config\n     * @param {?=} mode\n     * @return {?}\n     */\n    DatePickerService.prototype.getConfig = function (config, mode) {\n        if (mode === void 0) {\n            mode = 'daytime';\n        }\n        var /** @type {?} */ _config = (Object.assign({}, this.defaultConfig, { format: this.getDefaultFormatByMode(mode) }, this.utilsService.clearUndefined(config)));\n        this.utilsService.convertPropsToMoment(_config, _config.format, ['min', 'max']);\n        if (config && config.allowMultiSelect && config.closeOnSelect === undefined) {\n            _config.closeOnSelect = false;\n        }\n        moment$4.locale(_config.locale);\n        return _config;\n    };\n    /**\n     * @param {?} pickerConfig\n     * @return {?}\n     */\n    DatePickerService.prototype.getDayConfigService = function (pickerConfig) {\n        return {\n            min: pickerConfig.min,\n            max: pickerConfig.max,\n            isDayDisabledCallback: pickerConfig.isDayDisabledCallback,\n            weekDayFormat: pickerConfig.weekDayFormat,\n            showNearMonthDays: pickerConfig.showNearMonthDays,\n            showWeekNumbers: pickerConfig.showWeekNumbers,\n            firstDayOfWeek: pickerConfig.firstDayOfWeek,\n            format: pickerConfig.format,\n            allowMultiSelect: pickerConfig.allowMultiSelect,\n            monthFormat: pickerConfig.monthFormat,\n            monthFormatter: pickerConfig.monthFormatter,\n            enableMonthSelector: pickerConfig.enableMonthSelector,\n            yearFormat: pickerConfig.yearFormat,\n            yearFormatter: pickerConfig.yearFormatter,\n            dayBtnFormat: pickerConfig.dayBtnFormat,\n            dayBtnFormatter: pickerConfig.dayBtnFormatter,\n            dayBtnCssClassCallback: pickerConfig.dayBtnCssClassCallback,\n            monthBtnFormat: pickerConfig.monthBtnFormat,\n            monthBtnFormatter: pickerConfig.monthBtnFormatter,\n            monthBtnCssClassCallback: pickerConfig.monthBtnCssClassCallback,\n            multipleYearsNavigateBy: pickerConfig.multipleYearsNavigateBy,\n            showMultipleYearsNavigation: pickerConfig.showMultipleYearsNavigation,\n            locale: pickerConfig.locale,\n            returnedValueType: pickerConfig.returnedValueType,\n            showGoToCurrent: pickerConfig.showGoToCurrent,\n            unSelectOnClick: pickerConfig.unSelectOnClick\n        };\n    };\n    /**\n     * @param {?} pickerConfig\n     * @return {?}\n     */\n    DatePickerService.prototype.getDayTimeConfigService = function (pickerConfig) {\n        return this.daytimeCalendarService.getConfig(pickerConfig);\n    };\n    /**\n     * @param {?} pickerConfig\n     * @return {?}\n     */\n    DatePickerService.prototype.getTimeConfigService = function (pickerConfig) {\n        return this.timeSelectService.getConfig(pickerConfig);\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerService.prototype.pickerClosed = function () {\n        this.onPickerClosed.emit();\n    };\n    /**\n     * @param {?} value\n     * @param {?} config\n     * @return {?}\n     */\n    DatePickerService.prototype.isValidInputDateValue = function (value, config) {\n        var _this = this;\n        value = value ? value : '';\n        var /** @type {?} */ datesStrArr = this.utilsService.datesStringToStringArray(value);\n        return datesStrArr.every(function (date) { return _this.utilsService.isDateValid(date, config.format); });\n    };\n    /**\n     * @param {?} value\n     * @param {?} config\n     * @return {?}\n     */\n    DatePickerService.prototype.convertInputValueToMomentArray = function (value, config) {\n        value = value ? value : '';\n        var /** @type {?} */ datesStrArr = this.utilsService.datesStringToStringArray(value);\n        return this.utilsService.convertToMomentArray(datesStrArr, config.format, config.allowMultiSelect);\n    };\n    /**\n     * @param {?} mode\n     * @return {?}\n     */\n    DatePickerService.prototype.getDefaultFormatByMode = function (mode) {\n        switch (mode) {\n            case 'day':\n                return 'DD-MM-YYYY';\n            case 'daytime':\n                return 'DD-MM-YYYY HH:mm:ss';\n            case 'time':\n                return 'HH:mm:ss';\n            case 'month':\n                return 'MMM, YYYY';\n        }\n    };\n    return DatePickerService;\n}());\nvar DatePickerComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} dayPickerService\n     * @param {?} domHelper\n     * @param {?} elemRef\n     * @param {?} renderer\n     * @param {?} utilsService\n     * @param {?} cd\n     */\n    function DatePickerComponent(dayPickerService, domHelper, elemRef, renderer, utilsService, cd) {\n        this.dayPickerService = dayPickerService;\n        this.domHelper = domHelper;\n        this.elemRef = elemRef;\n        this.renderer = renderer;\n        this.utilsService = utilsService;\n        this.cd = cd;\n        this.isInitialized = false;\n        this.mode = 'day';\n        this.placeholder = '';\n        this.disabled = false;\n        this.open = new EventEmitter();\n        this.close = new EventEmitter();\n        this.onChange = new EventEmitter();\n        this.onGoToCurrent = new EventEmitter();\n        this.onLeftNav = new EventEmitter();\n        this.onRightNav = new EventEmitter();\n        this._areCalendarsShown = false;\n        this.hideStateHelper = false;\n        this._selected = [];\n        this.isFocusedTrigger = false;\n        this.handleInnerElementClickUnlisteners = [];\n        this.globalListnersUnlisteners = [];\n        this.api = {\n            open: this.showCalendars.bind(this),\n            close: this.hideCalendar.bind(this),\n            moveCalendarTo: this.moveCalendarTo.bind(this)\n        };\n    }\n    Object.defineProperty(DatePickerComponent.prototype, \"selected\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._selected;\n        },\n        /**\n         * @param {?} selected\n         * @return {?}\n         */\n        set: function (selected) {\n            this._selected = selected;\n            this.inputElementValue = ((this.utilsService\n                .convertFromMomentArray(this.componentConfig.format, selected, ECalendarValue.StringArr)))\n                .join(' | ');\n            var /** @type {?} */ val = this.processOnChangeCallback(selected);\n            this.onChangeCallback(val, false);\n            this.onChange.emit(val);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"areCalendarsShown\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._areCalendarsShown;\n        },\n        /**\n         * @param {?} value\n         * @return {?}\n         */\n        set: function (value) {\n            if (value) {\n                this.startGlobalListeners();\n                this.domHelper.appendElementToPosition({\n                    container: this.appendToElement,\n                    element: this.calendarWrapper,\n                    anchor: this.inputElementContainer,\n                    dimElem: this.popupElem,\n                    drops: this.componentConfig.drops,\n                    opens: this.componentConfig.opens\n                });\n            }\n            else {\n                this.stopGlobalListeners();\n                this.dayPickerService.pickerClosed();\n            }\n            this._areCalendarsShown = value;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"openOnFocus\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.componentConfig.openOnFocus;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"openOnClick\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this.componentConfig.openOnClick;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerComponent.prototype, \"currentDateView\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._currentDateView;\n        },\n        /**\n         * @param {?} date\n         * @return {?}\n         */\n        set: function (date) {\n            this._currentDateView = date;\n            if (this.dayCalendarRef) {\n                this.dayCalendarRef.moveCalendarTo(date);\n            }\n            if (this.monthCalendarRef) {\n                this.monthCalendarRef.moveCalendarTo(date);\n            }\n            if (this.dayTimeCalendarRef) {\n                this.dayTimeCalendarRef.moveCalendarTo(date);\n            }\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    DatePickerComponent.prototype.onClick = function () {\n        if (!this.openOnClick) {\n            return;\n        }\n        if (!this.isFocusedTrigger && !this.disabled) {\n            this.hideStateHelper = true;\n            if (!this.areCalendarsShown) {\n                this.showCalendars();\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerComponent.prototype.onBodyClick = function () {\n        if (!this.hideStateHelper && this.areCalendarsShown) {\n            this.hideCalendar();\n        }\n        this.hideStateHelper = false;\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerComponent.prototype.onScroll = function () {\n        if (this.areCalendarsShown) {\n            this.domHelper.setElementPosition({\n                container: this.appendToElement,\n                element: this.calendarWrapper,\n                anchor: this.inputElementContainer,\n                dimElem: this.popupElem,\n                drops: this.componentConfig.drops,\n                opens: this.componentConfig.opens\n            });\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DatePickerComponent.prototype.writeValue = function (value) {\n        this.inputValue = value;\n        if (value || value === '') {\n            this.selected = this.utilsService\n                .convertToMomentArray(value, this.componentConfig.format, this.componentConfig.allowMultiSelect);\n            this.init();\n        }\n        else {\n            this.selected = [];\n        }\n        this.cd.markForCheck();\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DatePickerComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    /**\n     * @param {?} _\n     * @param {?} changedByInput\n     * @return {?}\n     */\n    DatePickerComponent.prototype.onChangeCallback = function (_, changedByInput) {\n    };\n    ;\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DatePickerComponent.prototype.registerOnTouched = function (fn) {\n    };\n    /**\n     * @param {?} formControl\n     * @return {?}\n     */\n    DatePickerComponent.prototype.validate = function (formControl) {\n        return this.validateFn(formControl.value);\n    };\n    /**\n     * @param {?} selected\n     * @return {?}\n     */\n    DatePickerComponent.prototype.processOnChangeCallback = function (selected) {\n        if (typeof selected === 'string') {\n            return selected;\n        }\n        else {\n            return this.utilsService.convertFromMomentArray(this.componentConfig.format, selected, this.componentConfig.returnedValueType || this.inputValueType);\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerComponent.prototype.initValidators = function () {\n        this.validateFn = this.utilsService.createValidator({\n            minDate: this.minDate,\n            maxDate: this.maxDate,\n            minTime: this.minTime,\n            maxTime: this.maxTime\n        }, this.componentConfig.format, this.mode);\n        this.onChangeCallback(this.processOnChangeCallback(this.selected), false);\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerComponent.prototype.ngOnInit = function () {\n        this.isInitialized = true;\n        this.init();\n        this.initValidators();\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    DatePickerComponent.prototype.ngOnChanges = function (changes) {\n        if (this.isInitialized) {\n            var minDate = changes.minDate, maxDate = changes.maxDate, minTime = changes.minTime, maxTime = changes.maxTime;\n            this.init();\n            if (minDate || maxDate || minTime || maxTime) {\n                this.initValidators();\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerComponent.prototype.ngAfterViewInit = function () {\n        this.setElementPositionInDom();\n    };\n    /**\n     * @param {?} isDisabled\n     * @return {?}\n     */\n    DatePickerComponent.prototype.setDisabledState = function (isDisabled) {\n        this.disabled = isDisabled;\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerComponent.prototype.setElementPositionInDom = function () {\n        this.calendarWrapper = (this.calendarContainer.nativeElement);\n        this.setInputElementContainer();\n        this.popupElem = this.elemRef.nativeElement.querySelector('.dp-popup');\n        this.handleInnerElementClick(this.popupElem);\n        var appendTo = this.componentConfig.appendTo;\n        if (appendTo) {\n            if (typeof appendTo === 'string') {\n                this.appendToElement = (document.querySelector(/** @type {?} */ (appendTo)));\n            }\n            else {\n                this.appendToElement = (appendTo);\n            }\n        }\n        else {\n            this.appendToElement = this.elemRef.nativeElement;\n        }\n        this.appendToElement.appendChild(this.calendarWrapper);\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerComponent.prototype.setInputElementContainer = function () {\n        this.inputElementContainer = this.componentConfig.inputElementContainer\n            || this.elemRef.nativeElement.querySelector('.dp-input-container')\n            || document.body;\n    };\n    /**\n     * @param {?} element\n     * @return {?}\n     */\n    DatePickerComponent.prototype.handleInnerElementClick = function (element) {\n        var _this = this;\n        this.handleInnerElementClickUnlisteners.push(this.renderer.listen(element, 'click', function () {\n            _this.hideStateHelper = true;\n        }));\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerComponent.prototype.init = function () {\n        this.componentConfig = this.dayPickerService.getConfig(this.config, this.mode);\n        this.currentDateView = this.displayDate\n            ? this.utilsService.convertToMoment(this.displayDate, this.componentConfig.format).clone()\n            : this.utilsService\n                .getDefaultDisplayDate(this.currentDateView, this.selected, this.componentConfig.allowMultiSelect, this.componentConfig.min);\n        this.inputValueType = this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect);\n        this.dayCalendarConfig = this.dayPickerService.getDayConfigService(this.componentConfig);\n        this.dayTimeCalendarConfig = this.dayPickerService.getDayTimeConfigService(this.componentConfig);\n        this.timeSelectConfig = this.dayPickerService.getTimeConfigService(this.componentConfig);\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerComponent.prototype.inputFocused = function () {\n        var _this = this;\n        if (!this.openOnFocus) {\n            return;\n        }\n        this.isFocusedTrigger = true;\n        setTimeout(function () {\n            _this.hideStateHelper = false;\n            if (!_this.areCalendarsShown) {\n                _this.showCalendars();\n            }\n            _this.isFocusedTrigger = false;\n        }, this.componentConfig.onOpenDelay);\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerComponent.prototype.showCalendars = function () {\n        this.hideStateHelper = true;\n        this.areCalendarsShown = true;\n        if (this.timeSelectRef) {\n            this.timeSelectRef.api.triggerChange();\n        }\n        this.open.emit();\n        this.cd.markForCheck();\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerComponent.prototype.hideCalendar = function () {\n        this.areCalendarsShown = false;\n        if (this.dayCalendarRef) {\n            this.dayCalendarRef.api.toggleCalendarMode(ECalendarMode.Day);\n        }\n        this.close.emit();\n        this.cd.markForCheck();\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DatePickerComponent.prototype.onViewDateChange = function (value) {\n        if (this.dayPickerService.isValidInputDateValue(value, this.componentConfig)) {\n            this.selected = this.dayPickerService.convertInputValueToMomentArray(value, this.componentConfig);\n            this.currentDateView = this.selected.length\n                ? this.utilsService.getDefaultDisplayDate(null, this.selected, this.componentConfig.allowMultiSelect, this.componentConfig.min)\n                : this.currentDateView;\n        }\n        else {\n            this._selected = this.utilsService\n                .getValidMomentArray(value, this.componentConfig.format);\n            this.onChangeCallback(this.processOnChangeCallback(value), true);\n        }\n    };\n    /**\n     * @param {?} date\n     * @param {?} granularity\n     * @param {?=} ignoreClose\n     * @return {?}\n     */\n    DatePickerComponent.prototype.dateSelected = function (date, granularity, ignoreClose) {\n        this.selected = this.utilsService\n            .updateSelected(this.componentConfig.allowMultiSelect, this.selected, date, granularity);\n        if (!ignoreClose) {\n            this.onDateClick();\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerComponent.prototype.onDateClick = function () {\n        if (this.componentConfig.closeOnSelect) {\n            setTimeout(this.hideCalendar.bind(this), this.componentConfig.closeOnSelectDelay);\n        }\n    };\n    /**\n     * @param {?} event\n     * @return {?}\n     */\n    DatePickerComponent.prototype.onKeyPress = function (event) {\n        switch (event.keyCode) {\n            case (9):\n            case (27):\n                this.hideCalendar();\n                break;\n        }\n    };\n    /**\n     * @param {?} date\n     * @return {?}\n     */\n    DatePickerComponent.prototype.moveCalendarTo = function (date) {\n        var /** @type {?} */ momentDate = this.utilsService.convertToMoment(date, this.componentConfig.format);\n        this.currentDateView = momentDate;\n    };\n    /**\n     * @param {?} change\n     * @return {?}\n     */\n    DatePickerComponent.prototype.onLeftNavClick = function (change) {\n        this.onLeftNav.emit(change);\n    };\n    /**\n     * @param {?} change\n     * @return {?}\n     */\n    DatePickerComponent.prototype.onRightNavClick = function (change) {\n        this.onRightNav.emit(change);\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerComponent.prototype.startGlobalListeners = function () {\n        var _this = this;\n        this.globalListnersUnlisteners.push(this.renderer.listen(document, 'keydown', function (e) {\n            _this.onKeyPress(e);\n        }), this.renderer.listen(document, 'scroll', function () {\n            _this.onScroll();\n        }), this.renderer.listen(document, 'click', function () {\n            _this.onBodyClick();\n        }));\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerComponent.prototype.stopGlobalListeners = function () {\n        this.globalListnersUnlisteners.forEach(function (ul) { return ul(); });\n        this.globalListnersUnlisteners = [];\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerComponent.prototype.ngOnDestroy = function () {\n        this.handleInnerElementClickUnlisteners.forEach(function (ul) { return ul(); });\n        if (this.appendToElement) {\n            this.appendToElement.removeChild(this.calendarWrapper);\n        }\n    };\n    return DatePickerComponent;\n}());\nvar DatePickerDirectiveService = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} utilsService\n     */\n    function DatePickerDirectiveService(utilsService) {\n        this.utilsService = utilsService;\n    }\n    /**\n     * @param {?} attachTo\n     * @param {?} baseElement\n     * @return {?}\n     */\n    DatePickerDirectiveService.prototype.convertToHTMLElement = function (attachTo, baseElement) {\n        if (typeof attachTo === 'string') {\n            return this.utilsService.closestParent(baseElement, attachTo);\n        }\n        else if (attachTo) {\n            return attachTo.nativeElement;\n        }\n        return undefined;\n    };\n    /**\n     * @param {?=} config\n     * @param {?=} baseElement\n     * @param {?=} attachTo\n     * @return {?}\n     */\n    DatePickerDirectiveService.prototype.getConfig = function (config, baseElement, attachTo) {\n        if (config === void 0) {\n            config = {};\n        }\n        var /** @type {?} */ _config = Object.assign({}, config);\n        _config.hideInputContainer = true;\n        if (baseElement) {\n            _config.inputElementContainer = attachTo\n                ? this.convertToHTMLElement(attachTo, baseElement.nativeElement)\n                : baseElement.nativeElement;\n        }\n        return _config;\n    };\n    return DatePickerDirectiveService;\n}());\nvar DatePickerDirective = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} viewContainerRef\n     * @param {?} elemRef\n     * @param {?} componentFactoryResolver\n     * @param {?} service\n     * @param {?} formControl\n     */\n    function DatePickerDirective(viewContainerRef, elemRef, componentFactoryResolver, service, formControl) {\n        this.viewContainerRef = viewContainerRef;\n        this.elemRef = elemRef;\n        this.componentFactoryResolver = componentFactoryResolver;\n        this.service = service;\n        this.formControl = formControl;\n        this._mode = 'day';\n        this.open = new EventEmitter();\n        this.close = new EventEmitter();\n        this.onChange = new EventEmitter();\n        this.onGoToCurrent = new EventEmitter();\n        this.onLeftNav = new EventEmitter();\n        this.onRightNav = new EventEmitter();\n    }\n    Object.defineProperty(DatePickerDirective.prototype, \"config\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._config;\n        },\n        /**\n         * @param {?} config\n         * @return {?}\n         */\n        set: function (config) {\n            this._config = this.service.getConfig(config, this.viewContainerRef.element, this.attachTo);\n            this.updateDatepickerConfig();\n            this.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerDirective.prototype, \"attachTo\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._attachTo;\n        },\n        /**\n         * @param {?} attachTo\n         * @return {?}\n         */\n        set: function (attachTo) {\n            this._attachTo = attachTo;\n            this._config = this.service.getConfig(this.config, this.viewContainerRef.element, this.attachTo);\n            this.updateDatepickerConfig();\n            this.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerDirective.prototype, \"theme\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._theme;\n        },\n        /**\n         * @param {?} theme\n         * @return {?}\n         */\n        set: function (theme) {\n            this._theme = theme;\n            if (this.datePicker) {\n                this.datePicker.theme = theme;\n            }\n            this.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerDirective.prototype, \"mode\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._mode;\n        },\n        /**\n         * @param {?} mode\n         * @return {?}\n         */\n        set: function (mode) {\n            this._mode = mode;\n            if (this.datePicker) {\n                this.datePicker.mode = mode;\n            }\n            this.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerDirective.prototype, \"minDate\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._minDate;\n        },\n        /**\n         * @param {?} minDate\n         * @return {?}\n         */\n        set: function (minDate) {\n            this._minDate = minDate;\n            if (this.datePicker) {\n                this.datePicker.minDate = minDate;\n                this.datePicker.ngOnInit();\n            }\n            this.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerDirective.prototype, \"maxDate\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._maxDate;\n        },\n        /**\n         * @param {?} maxDate\n         * @return {?}\n         */\n        set: function (maxDate) {\n            this._maxDate = maxDate;\n            if (this.datePicker) {\n                this.datePicker.maxDate = maxDate;\n                this.datePicker.ngOnInit();\n            }\n            this.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerDirective.prototype, \"minTime\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._minTime;\n        },\n        /**\n         * @param {?} minTime\n         * @return {?}\n         */\n        set: function (minTime) {\n            this._minTime = minTime;\n            if (this.datePicker) {\n                this.datePicker.minTime = minTime;\n                this.datePicker.ngOnInit();\n            }\n            this.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerDirective.prototype, \"maxTime\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._maxTime;\n        },\n        /**\n         * @param {?} maxTime\n         * @return {?}\n         */\n        set: function (maxTime) {\n            this._maxTime = maxTime;\n            if (this.datePicker) {\n                this.datePicker.maxTime = maxTime;\n                this.datePicker.ngOnInit();\n            }\n            this.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DatePickerDirective.prototype, \"displayDate\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._displayDate;\n        },\n        /**\n         * @param {?} displayDate\n         * @return {?}\n         */\n        set: function (displayDate) {\n            this._displayDate = displayDate;\n            this.updateDatepickerConfig();\n            this.markForCheck();\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    DatePickerDirective.prototype.ngOnInit = function () {\n        this.datePicker = this.createDatePicker();\n        this.api = this.datePicker.api;\n        this.updateDatepickerConfig();\n        this.attachModelToDatePicker();\n        this.datePicker.theme = this.theme;\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerDirective.prototype.createDatePicker = function () {\n        var /** @type {?} */ factory = this.componentFactoryResolver.resolveComponentFactory(DatePickerComponent);\n        return this.viewContainerRef.createComponent(factory).instance;\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerDirective.prototype.attachModelToDatePicker = function () {\n        var _this = this;\n        if (!this.formControl) {\n            return;\n        }\n        this.datePicker.onViewDateChange(this.formControl.value);\n        this.formControl.valueChanges.subscribe(function (value) {\n            if (value !== _this.datePicker.inputElementValue) {\n                _this.datePicker.onViewDateChange(value);\n            }\n        });\n        var /** @type {?} */ setup = true;\n        this.datePicker.registerOnChange(function (value, changedByInput) {\n            if (value) {\n                var /** @type {?} */ isMultiselectEmpty = setup && Array.isArray(value) && !value.length;\n                if (!isMultiselectEmpty && !changedByInput) {\n                    _this.formControl.control.setValue(_this.datePicker.inputElementValue);\n                }\n            }\n            var /** @type {?} */ errors = _this.datePicker.validateFn(value);\n            if (!setup) {\n                _this.formControl.control.markAsDirty({\n                    onlySelf: true\n                });\n            }\n            else {\n                setup = false;\n            }\n            if (errors) {\n                if (errors.hasOwnProperty('format')) {\n                    var given = errors['format'].given;\n                    _this.datePicker.inputElementValue = given;\n                    if (!changedByInput) {\n                        _this.formControl.control.setValue(given);\n                    }\n                }\n                _this.formControl.control.setErrors(errors);\n            }\n        });\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerDirective.prototype.onClick = function () {\n        this.datePicker.onClick();\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerDirective.prototype.onFocus = function () {\n        this.datePicker.inputFocused();\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerDirective.prototype.updateDatepickerConfig = function () {\n        if (this.datePicker) {\n            this.datePicker.minDate = this.minDate;\n            this.datePicker.maxDate = this.maxDate;\n            this.datePicker.minTime = this.minTime;\n            this.datePicker.maxTime = this.maxTime;\n            this.datePicker.mode = this.mode || 'day';\n            this.datePicker.displayDate = this.displayDate;\n            this.datePicker.config = this.config;\n            this.datePicker.open = this.open;\n            this.datePicker.close = this.close;\n            this.datePicker.onChange = this.onChange;\n            this.datePicker.onGoToCurrent = this.onGoToCurrent;\n            this.datePicker.onLeftNav = this.onLeftNav;\n            this.datePicker.onRightNav = this.onRightNav;\n            this.datePicker.init();\n            if (this.datePicker.componentConfig.disableKeypress) {\n                this.elemRef.nativeElement.setAttribute('readonly', true);\n            }\n            else {\n                this.elemRef.nativeElement.removeAttribute('readonly');\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    DatePickerDirective.prototype.markForCheck = function () {\n        if (this.datePicker) {\n            this.datePicker.cd.markForCheck();\n        }\n    };\n    return DatePickerDirective;\n}());\nvar moment$5 = momentNs;\nvar DayCalendarComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} dayCalendarService\n     * @param {?} utilsService\n     * @param {?} cd\n     */\n    function DayCalendarComponent(dayCalendarService, utilsService, cd) {\n        this.dayCalendarService = dayCalendarService;\n        this.utilsService = utilsService;\n        this.cd = cd;\n        this.onSelect = new EventEmitter();\n        this.onMonthSelect = new EventEmitter();\n        this.onNavHeaderBtnClick = new EventEmitter();\n        this.onGoToCurrent = new EventEmitter();\n        this.onLeftNav = new EventEmitter();\n        this.onRightNav = new EventEmitter();\n        this.CalendarMode = ECalendarMode;\n        this.isInited = false;\n        this.currentCalendarMode = ECalendarMode.Day;\n        this._shouldShowCurrent = true;\n        this.api = {\n            moveCalendarsBy: this.moveCalendarsBy.bind(this),\n            moveCalendarTo: this.moveCalendarTo.bind(this),\n            toggleCalendarMode: this.toggleCalendarMode.bind(this)\n        };\n    }\n    Object.defineProperty(DayCalendarComponent.prototype, \"selected\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._selected;\n        },\n        /**\n         * @param {?} selected\n         * @return {?}\n         */\n        set: function (selected) {\n            this._selected = selected;\n            this.onChangeCallback(this.processOnChangeCallback(selected));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(DayCalendarComponent.prototype, \"currentDateView\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._currentDateView;\n        },\n        /**\n         * @param {?} current\n         * @return {?}\n         */\n        set: function (current) {\n            this._currentDateView = current.clone();\n            this.weeks = this.dayCalendarService\n                .generateMonthArray(this.componentConfig, this._currentDateView, this.selected);\n            this.navLabel = this.dayCalendarService.getHeaderLabel(this.componentConfig, this._currentDateView);\n            this.showLeftNav = this.dayCalendarService.shouldShowLeft(this.componentConfig.min, this.currentDateView);\n            this.showRightNav = this.dayCalendarService.shouldShowRight(this.componentConfig.max, this.currentDateView);\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.ngOnInit = function () {\n        this.isInited = true;\n        this.init();\n        this.initValidators();\n    };\n    /**\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.init = function () {\n        this.componentConfig = this.dayCalendarService.getConfig(this.config);\n        this.selected = this.selected || [];\n        this.currentDateView = this.displayDate\n            ? this.utilsService.convertToMoment(this.displayDate, this.componentConfig.format).clone()\n            : this.utilsService\n                .getDefaultDisplayDate(this.currentDateView, this.selected, this.componentConfig.allowMultiSelect, this.componentConfig.min);\n        this.weekdays = this.dayCalendarService\n            .generateWeekdays(this.componentConfig.firstDayOfWeek);\n        this.inputValueType = this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect);\n        this.monthCalendarConfig = this.dayCalendarService.getMonthCalendarConfig(this.componentConfig);\n        this._shouldShowCurrent = this.shouldShowCurrent();\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.ngOnChanges = function (changes) {\n        if (this.isInited) {\n            var minDate = changes.minDate, maxDate = changes.maxDate, config = changes.config;\n            this.handleConfigChange(config);\n            this.init();\n            if (minDate || maxDate) {\n                this.initValidators();\n            }\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.writeValue = function (value) {\n        this.inputValue = value;\n        if (value) {\n            this.selected = this.utilsService\n                .convertToMomentArray(value, this.componentConfig.format, this.componentConfig.allowMultiSelect);\n            this.inputValueType = this.utilsService\n                .getInputType(this.inputValue, this.componentConfig.allowMultiSelect);\n        }\n        else {\n            this.selected = [];\n        }\n        this.weeks = this.dayCalendarService\n            .generateMonthArray(this.componentConfig, this.currentDateView, this.selected);\n        this.cd.markForCheck();\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    /**\n     * @param {?} _\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.onChangeCallback = function (_) {\n    };\n    ;\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.registerOnTouched = function (fn) {\n    };\n    /**\n     * @param {?} formControl\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.validate = function (formControl) {\n        if (this.minDate || this.maxDate) {\n            return this.validateFn(formControl.value);\n        }\n        else {\n            return function () { return null; };\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.processOnChangeCallback = function (value) {\n        return this.utilsService.convertFromMomentArray(this.componentConfig.format, value, this.componentConfig.returnedValueType || this.inputValueType);\n    };\n    /**\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.initValidators = function () {\n        this.validateFn = this.utilsService.createValidator({ minDate: this.minDate, maxDate: this.maxDate }, this.componentConfig.format, 'day');\n        this.onChangeCallback(this.processOnChangeCallback(this.selected));\n    };\n    /**\n     * @param {?} day\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.dayClicked = function (day) {\n        if (day.selected && !this.componentConfig.unSelectOnClick) {\n            return;\n        }\n        this.selected = this.utilsService\n            .updateSelected(this.componentConfig.allowMultiSelect, this.selected, day);\n        this.weeks = this.dayCalendarService\n            .generateMonthArray(this.componentConfig, this.currentDateView, this.selected);\n        this.onSelect.emit(day);\n    };\n    /**\n     * @param {?} day\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.getDayBtnText = function (day) {\n        return this.dayCalendarService.getDayBtnText(this.componentConfig, day.date);\n    };\n    /**\n     * @param {?} day\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.getDayBtnCssClass = function (day) {\n        var /** @type {?} */ cssClasses = {\n            'dp-selected': day.selected,\n            'dp-current-month': day.currentMonth,\n            'dp-prev-month': day.prevMonth,\n            'dp-next-month': day.nextMonth,\n            'dp-current-day': day.currentDay\n        };\n        var /** @type {?} */ customCssClass = this.dayCalendarService.getDayBtnCssClass(this.componentConfig, day.date);\n        if (customCssClass) {\n            cssClasses[customCssClass] = true;\n        }\n        return cssClasses;\n    };\n    /**\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.onLeftNavClick = function () {\n        var /** @type {?} */ from = this.currentDateView.clone();\n        this.moveCalendarsBy(this.currentDateView, -1, 'month');\n        var /** @type {?} */ to = this.currentDateView.clone();\n        this.onLeftNav.emit({ from: from, to: to });\n    };\n    /**\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.onRightNavClick = function () {\n        var /** @type {?} */ from = this.currentDateView.clone();\n        this.moveCalendarsBy(this.currentDateView, 1, 'month');\n        var /** @type {?} */ to = this.currentDateView.clone();\n        this.onRightNav.emit({ from: from, to: to });\n    };\n    /**\n     * @param {?} change\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.onMonthCalendarLeftClick = function (change) {\n        this.onLeftNav.emit(change);\n    };\n    /**\n     * @param {?} change\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.onMonthCalendarRightClick = function (change) {\n        this.onRightNav.emit(change);\n    };\n    /**\n     * @param {?} change\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.onMonthCalendarSecondaryLeftClick = function (change) {\n        this.onRightNav.emit(change);\n    };\n    /**\n     * @param {?} change\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.onMonthCalendarSecondaryRightClick = function (change) {\n        this.onLeftNav.emit(change);\n    };\n    /**\n     * @param {?} weekday\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.getWeekdayName = function (weekday) {\n        if (this.componentConfig.weekDayFormatter) {\n            return this.componentConfig.weekDayFormatter(weekday.day());\n        }\n        return weekday.format(this.componentConfig.weekDayFormat);\n    };\n    /**\n     * @param {?} mode\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.toggleCalendarMode = function (mode) {\n        if (this.currentCalendarMode !== mode) {\n            this.currentCalendarMode = mode;\n            this.onNavHeaderBtnClick.emit(mode);\n        }\n        this.cd.markForCheck();\n    };\n    /**\n     * @param {?} month\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.monthSelected = function (month) {\n        this.currentDateView = month.date.clone();\n        this.currentCalendarMode = ECalendarMode.Day;\n        this.onMonthSelect.emit(month);\n    };\n    /**\n     * @param {?} current\n     * @param {?} amount\n     * @param {?=} granularity\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.moveCalendarsBy = function (current, amount, granularity) {\n        if (granularity === void 0) {\n            granularity = 'month';\n        }\n        this.currentDateView = current.clone().add(amount, granularity);\n        this.cd.markForCheck();\n    };\n    /**\n     * @param {?} to\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.moveCalendarTo = function (to) {\n        if (to) {\n            this.currentDateView = this.utilsService.convertToMoment(to, this.componentConfig.format);\n        }\n        this.cd.markForCheck();\n    };\n    /**\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.shouldShowCurrent = function () {\n        return this.utilsService.shouldShowCurrent(this.componentConfig.showGoToCurrent, 'day', this.componentConfig.min, this.componentConfig.max);\n    };\n    /**\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.goToCurrent = function () {\n        this.currentDateView = moment$5();\n        this.onGoToCurrent.emit();\n    };\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    DayCalendarComponent.prototype.handleConfigChange = function (config) {\n        if (config) {\n            var /** @type {?} */ prevConf = this.dayCalendarService.getConfig(config.previousValue);\n            var /** @type {?} */ currentConf = this.dayCalendarService.getConfig(config.currentValue);\n            if (this.utilsService.shouldResetCurrentView(prevConf, currentConf)) {\n                this._currentDateView = null;\n            }\n        }\n    };\n    return DayCalendarComponent;\n}());\nvar moment$7 = momentNs;\nvar MonthCalendarService = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} utilsService\n     */\n    function MonthCalendarService(utilsService) {\n        this.utilsService = utilsService;\n        this.DEFAULT_CONFIG = {\n            allowMultiSelect: false,\n            yearFormat: 'YYYY',\n            format: 'MM-YYYY',\n            isNavHeaderBtnClickable: false,\n            monthBtnFormat: 'MMM',\n            locale: moment$7.locale(),\n            multipleYearsNavigateBy: 10,\n            showMultipleYearsNavigation: false,\n            unSelectOnClick: true\n        };\n    }\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    MonthCalendarService.prototype.getConfig = function (config) {\n        var /** @type {?} */ _config = (Object.assign({}, this.DEFAULT_CONFIG, this.utilsService.clearUndefined(config)));\n        this.utilsService.convertPropsToMoment(_config, _config.format, ['min', 'max']);\n        moment$7.locale(_config.locale);\n        return _config;\n    };\n    /**\n     * @param {?} config\n     * @param {?} year\n     * @param {?=} selected\n     * @return {?}\n     */\n    MonthCalendarService.prototype.generateYear = function (config, year, selected) {\n        var _this = this;\n        if (selected === void 0) {\n            selected = null;\n        }\n        var /** @type {?} */ index = year.clone().startOf('year');\n        return this.utilsService.createArray(3).map(function () {\n            return _this.utilsService.createArray(4).map(function () {\n                var /** @type {?} */ date = index.clone();\n                var /** @type {?} */ month = {\n                    date: date,\n                    selected: !!selected.find(function (s) { return index.isSame(s, 'month'); }),\n                    currentMonth: index.isSame(moment$7(), 'month'),\n                    disabled: _this.isMonthDisabled(date, config),\n                    text: _this.getMonthBtnText(config, date)\n                };\n                index.add(1, 'month');\n                return month;\n            });\n        });\n    };\n    /**\n     * @param {?} date\n     * @param {?} config\n     * @return {?}\n     */\n    MonthCalendarService.prototype.isMonthDisabled = function (date, config) {\n        if (config.min && date.isBefore(config.min, 'month')) {\n            return true;\n        }\n        return !!(config.max && date.isAfter(config.max, 'month'));\n    };\n    /**\n     * @param {?} min\n     * @param {?} currentMonthView\n     * @return {?}\n     */\n    MonthCalendarService.prototype.shouldShowLeft = function (min, currentMonthView) {\n        return min ? min.isBefore(currentMonthView, 'year') : true;\n    };\n    /**\n     * @param {?} max\n     * @param {?} currentMonthView\n     * @return {?}\n     */\n    MonthCalendarService.prototype.shouldShowRight = function (max, currentMonthView) {\n        return max ? max.isAfter(currentMonthView, 'year') : true;\n    };\n    /**\n     * @param {?} config\n     * @param {?} year\n     * @return {?}\n     */\n    MonthCalendarService.prototype.getHeaderLabel = function (config, year) {\n        if (config.yearFormatter) {\n            return config.yearFormatter(year);\n        }\n        return year.format(config.yearFormat);\n    };\n    /**\n     * @param {?} config\n     * @param {?} month\n     * @return {?}\n     */\n    MonthCalendarService.prototype.getMonthBtnText = function (config, month) {\n        if (config.monthBtnFormatter) {\n            return config.monthBtnFormatter(month);\n        }\n        return month.format(config.monthBtnFormat);\n    };\n    /**\n     * @param {?} config\n     * @param {?} month\n     * @return {?}\n     */\n    MonthCalendarService.prototype.getMonthBtnCssClass = function (config, month) {\n        if (config.monthBtnCssClassCallback) {\n            return config.monthBtnCssClassCallback(month);\n        }\n        return '';\n    };\n    return MonthCalendarService;\n}());\nvar moment$6 = momentNs;\nvar MonthCalendarComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} monthCalendarService\n     * @param {?} utilsService\n     * @param {?} cd\n     */\n    function MonthCalendarComponent(monthCalendarService, utilsService, cd) {\n        this.monthCalendarService = monthCalendarService;\n        this.utilsService = utilsService;\n        this.cd = cd;\n        this.onSelect = new EventEmitter();\n        this.onNavHeaderBtnClick = new EventEmitter();\n        this.onGoToCurrent = new EventEmitter();\n        this.onLeftNav = new EventEmitter();\n        this.onRightNav = new EventEmitter();\n        this.onLeftSecondaryNav = new EventEmitter();\n        this.onRightSecondaryNav = new EventEmitter();\n        this.isInited = false;\n        this._shouldShowCurrent = true;\n        this.api = {\n            toggleCalendar: this.toggleCalendarMode.bind(this),\n            moveCalendarTo: this.moveCalendarTo.bind(this)\n        };\n    }\n    Object.defineProperty(MonthCalendarComponent.prototype, \"selected\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._selected;\n        },\n        /**\n         * @param {?} selected\n         * @return {?}\n         */\n        set: function (selected) {\n            this._selected = selected;\n            this.onChangeCallback(this.processOnChangeCallback(selected));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    Object.defineProperty(MonthCalendarComponent.prototype, \"currentDateView\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._currentDateView;\n        },\n        /**\n         * @param {?} current\n         * @return {?}\n         */\n        set: function (current) {\n            this._currentDateView = current.clone();\n            this.yearMonths = this.monthCalendarService\n                .generateYear(this.componentConfig, this._currentDateView, this.selected);\n            this.navLabel = this.monthCalendarService.getHeaderLabel(this.componentConfig, this.currentDateView);\n            this.showLeftNav = this.monthCalendarService.shouldShowLeft(this.componentConfig.min, this._currentDateView);\n            this.showRightNav = this.monthCalendarService.shouldShowRight(this.componentConfig.max, this.currentDateView);\n            this.showSecondaryLeftNav = this.componentConfig.showMultipleYearsNavigation && this.showLeftNav;\n            this.showSecondaryRightNav = this.componentConfig.showMultipleYearsNavigation && this.showRightNav;\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.ngOnInit = function () {\n        this.isInited = true;\n        this.init();\n        this.initValidators();\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.ngOnChanges = function (changes) {\n        if (this.isInited) {\n            var minDate = changes.minDate, maxDate = changes.maxDate, config = changes.config;\n            this.handleConfigChange(config);\n            this.init();\n            if (minDate || maxDate) {\n                this.initValidators();\n            }\n        }\n    };\n    /**\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.init = function () {\n        this.componentConfig = this.monthCalendarService.getConfig(this.config);\n        this.selected = this.selected || [];\n        this.currentDateView = this.displayDate\n            ? this.displayDate\n            : this.utilsService\n                .getDefaultDisplayDate(this.currentDateView, this.selected, this.componentConfig.allowMultiSelect, this.componentConfig.min);\n        this.inputValueType = this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect);\n        this._shouldShowCurrent = this.shouldShowCurrent();\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.writeValue = function (value) {\n        this.inputValue = value;\n        if (value) {\n            this.selected = this.utilsService\n                .convertToMomentArray(value, this.componentConfig.format, this.componentConfig.allowMultiSelect);\n            this.yearMonths = this.monthCalendarService\n                .generateYear(this.componentConfig, this.currentDateView, this.selected);\n            this.inputValueType = this.utilsService.getInputType(this.inputValue, this.componentConfig.allowMultiSelect);\n        }\n        this.cd.markForCheck();\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    /**\n     * @param {?} _\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.onChangeCallback = function (_) {\n    };\n    ;\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.registerOnTouched = function (fn) {\n    };\n    /**\n     * @param {?} formControl\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.validate = function (formControl) {\n        if (this.minDate || this.maxDate) {\n            return this.validateFn(formControl.value);\n        }\n        else {\n            return function () { return null; };\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.processOnChangeCallback = function (value) {\n        return this.utilsService.convertFromMomentArray(this.componentConfig.format, value, this.componentConfig.returnedValueType || this.inputValueType);\n    };\n    /**\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.initValidators = function () {\n        this.validateFn = this.validateFn = this.utilsService.createValidator({ minDate: this.minDate, maxDate: this.maxDate }, this.componentConfig.format, 'month');\n        this.onChangeCallback(this.processOnChangeCallback(this.selected));\n    };\n    /**\n     * @param {?} month\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.monthClicked = function (month) {\n        if (month.selected && !this.componentConfig.unSelectOnClick) {\n            return;\n        }\n        this.selected = this.utilsService\n            .updateSelected(this.componentConfig.allowMultiSelect, this.selected, month, 'month');\n        this.yearMonths = this.monthCalendarService\n            .generateYear(this.componentConfig, this.currentDateView, this.selected);\n        this.onSelect.emit(month);\n    };\n    /**\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.onLeftNavClick = function () {\n        var /** @type {?} */ from = this.currentDateView.clone();\n        this.currentDateView = this.currentDateView.clone().subtract(1, 'year');\n        var /** @type {?} */ to = this.currentDateView.clone();\n        this.yearMonths = this.monthCalendarService.generateYear(this.componentConfig, this.currentDateView, this.selected);\n        this.onLeftNav.emit({ from: from, to: to });\n    };\n    /**\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.onLeftSecondaryNavClick = function () {\n        var /** @type {?} */ navigateBy = this.componentConfig.multipleYearsNavigateBy;\n        var /** @type {?} */ isOutsideRange = this.componentConfig.min &&\n            this.currentDateView.year() - this.componentConfig.min.year() < navigateBy;\n        if (isOutsideRange) {\n            navigateBy = this.currentDateView.year() - this.componentConfig.min.year();\n        }\n        var /** @type {?} */ from = this.currentDateView.clone();\n        this.currentDateView = this.currentDateView.clone().subtract(navigateBy, 'year');\n        var /** @type {?} */ to = this.currentDateView.clone();\n        this.onLeftSecondaryNav.emit({ from: from, to: to });\n    };\n    /**\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.onRightNavClick = function () {\n        var /** @type {?} */ from = this.currentDateView.clone();\n        this.currentDateView = this.currentDateView.clone().add(1, 'year');\n        var /** @type {?} */ to = this.currentDateView.clone();\n        this.onRightNav.emit({ from: from, to: to });\n    };\n    /**\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.onRightSecondaryNavClick = function () {\n        var /** @type {?} */ navigateBy = this.componentConfig.multipleYearsNavigateBy;\n        var /** @type {?} */ isOutsideRange = this.componentConfig.max &&\n            this.componentConfig.max.year() - this.currentDateView.year() < navigateBy;\n        if (isOutsideRange) {\n            navigateBy = this.componentConfig.max.year() - this.currentDateView.year();\n        }\n        var /** @type {?} */ from = this.currentDateView.clone();\n        this.currentDateView = this.currentDateView.clone().add(navigateBy, 'year');\n        var /** @type {?} */ to = this.currentDateView.clone();\n        this.onRightSecondaryNav.emit({ from: from, to: to });\n    };\n    /**\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.toggleCalendarMode = function () {\n        this.onNavHeaderBtnClick.emit();\n    };\n    /**\n     * @param {?} month\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.getMonthBtnCssClass = function (month) {\n        var /** @type {?} */ cssClass = {\n            'dp-selected': month.selected,\n            'dp-current-month': month.currentMonth\n        };\n        var /** @type {?} */ customCssClass = this.monthCalendarService.getMonthBtnCssClass(this.componentConfig, month.date);\n        if (customCssClass) {\n            cssClass[customCssClass] = true;\n        }\n        return cssClass;\n    };\n    /**\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.shouldShowCurrent = function () {\n        return this.utilsService.shouldShowCurrent(this.componentConfig.showGoToCurrent, 'month', this.componentConfig.min, this.componentConfig.max);\n    };\n    /**\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.goToCurrent = function () {\n        this.currentDateView = moment$6();\n        this.onGoToCurrent.emit();\n    };\n    /**\n     * @param {?} to\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.moveCalendarTo = function (to) {\n        if (to) {\n            this.currentDateView = this.utilsService.convertToMoment(to, this.componentConfig.format);\n            this.cd.markForCheck();\n        }\n    };\n    /**\n     * @param {?} config\n     * @return {?}\n     */\n    MonthCalendarComponent.prototype.handleConfigChange = function (config) {\n        if (config) {\n            var /** @type {?} */ prevConf = this.monthCalendarService.getConfig(config.previousValue);\n            var /** @type {?} */ currentConf = this.monthCalendarService.getConfig(config.currentValue);\n            if (this.utilsService.shouldResetCurrentView(prevConf, currentConf)) {\n                this._currentDateView = null;\n            }\n        }\n    };\n    return MonthCalendarComponent;\n}());\nvar moment$8 = momentNs;\nvar TimeSelectComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} timeSelectService\n     * @param {?} utilsService\n     * @param {?} cd\n     */\n    function TimeSelectComponent(timeSelectService, utilsService, cd) {\n        this.timeSelectService = timeSelectService;\n        this.utilsService = utilsService;\n        this.cd = cd;\n        this.onChange = new EventEmitter();\n        this.isInited = false;\n        this.api = {\n            triggerChange: this.emitChange.bind(this)\n        };\n    }\n    Object.defineProperty(TimeSelectComponent.prototype, \"selected\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._selected;\n        },\n        /**\n         * @param {?} selected\n         * @return {?}\n         */\n        set: function (selected) {\n            this._selected = selected;\n            this.calculateTimeParts(this.selected);\n            this.showDecHour = this.timeSelectService.shouldShowDecrease(this.componentConfig, this._selected, 'hour');\n            this.showDecMinute = this.timeSelectService.shouldShowDecrease(this.componentConfig, this._selected, 'minute');\n            this.showDecSecond = this.timeSelectService.shouldShowDecrease(this.componentConfig, this._selected, 'second');\n            this.showIncHour = this.timeSelectService.shouldShowIncrease(this.componentConfig, this._selected, 'hour');\n            this.showIncMinute = this.timeSelectService.shouldShowIncrease(this.componentConfig, this._selected, 'minute');\n            this.showIncSecond = this.timeSelectService.shouldShowIncrease(this.componentConfig, this._selected, 'second');\n            this.showToggleMeridiem = this.timeSelectService.shouldShowToggleMeridiem(this.componentConfig, this._selected);\n            this.onChangeCallback(this.processOnChangeCallback(selected));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    TimeSelectComponent.prototype.ngOnInit = function () {\n        this.isInited = true;\n        this.init();\n        this.initValidators();\n    };\n    /**\n     * @return {?}\n     */\n    TimeSelectComponent.prototype.init = function () {\n        this.componentConfig = this.timeSelectService.getConfig(this.config);\n        this.selected = this.selected || moment$8();\n        this.inputValueType = this.utilsService.getInputType(this.inputValue, false);\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    TimeSelectComponent.prototype.ngOnChanges = function (changes) {\n        if (this.isInited) {\n            var minDate = changes.minDate, maxDate = changes.maxDate, minTime = changes.minTime, maxTime = changes.maxTime;\n            this.init();\n            if (minDate || maxDate || minTime || maxTime) {\n                this.initValidators();\n            }\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    TimeSelectComponent.prototype.writeValue = function (value) {\n        this.inputValue = value;\n        if (value) {\n            var /** @type {?} */ momentValue = this.utilsService\n                .convertToMomentArray(value, this.timeSelectService.getTimeFormat(this.componentConfig), false)[0];\n            if (momentValue.isValid()) {\n                this.selected = momentValue;\n                this.inputValueType = this.utilsService\n                    .getInputType(this.inputValue, false);\n            }\n        }\n        this.cd.markForCheck();\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    TimeSelectComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    /**\n     * @param {?} _\n     * @return {?}\n     */\n    TimeSelectComponent.prototype.onChangeCallback = function (_) {\n    };\n    ;\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    TimeSelectComponent.prototype.registerOnTouched = function (fn) {\n    };\n    /**\n     * @param {?} formControl\n     * @return {?}\n     */\n    TimeSelectComponent.prototype.validate = function (formControl) {\n        if (this.minDate || this.maxDate || this.minTime || this.maxTime) {\n            return this.validateFn(formControl.value);\n        }\n        else {\n            return function () { return null; };\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    TimeSelectComponent.prototype.processOnChangeCallback = function (value) {\n        return this.utilsService.convertFromMomentArray(this.timeSelectService.getTimeFormat(this.componentConfig), [value], this.componentConfig.returnedValueType || this.inputValueType);\n    };\n    /**\n     * @return {?}\n     */\n    TimeSelectComponent.prototype.initValidators = function () {\n        this.validateFn = this.utilsService.createValidator({\n            minDate: this.minDate,\n            maxDate: this.maxDate,\n            minTime: this.minTime,\n            maxTime: this.maxTime\n        }, undefined, 'day');\n        this.onChangeCallback(this.processOnChangeCallback(this.selected));\n    };\n    /**\n     * @param {?} unit\n     * @return {?}\n     */\n    TimeSelectComponent.prototype.decrease = function (unit) {\n        this.selected = this.timeSelectService.decrease(this.componentConfig, this.selected, unit);\n        this.emitChange();\n    };\n    /**\n     * @param {?} unit\n     * @return {?}\n     */\n    TimeSelectComponent.prototype.increase = function (unit) {\n        this.selected = this.timeSelectService.increase(this.componentConfig, this.selected, unit);\n        this.emitChange();\n    };\n    /**\n     * @return {?}\n     */\n    TimeSelectComponent.prototype.toggleMeridiem = function () {\n        this.selected = this.timeSelectService.toggleMeridiem(this.selected);\n        this.emitChange();\n    };\n    /**\n     * @return {?}\n     */\n    TimeSelectComponent.prototype.emitChange = function () {\n        this.onChange.emit({ date: this.selected, selected: false });\n        this.cd.markForCheck();\n    };\n    /**\n     * @param {?} time\n     * @return {?}\n     */\n    TimeSelectComponent.prototype.calculateTimeParts = function (time) {\n        this.hours = this.timeSelectService.getHours(this.componentConfig, time);\n        this.minutes = this.timeSelectService.getMinutes(this.componentConfig, time);\n        this.seconds = this.timeSelectService.getSeconds(this.componentConfig, time);\n        this.meridiem = this.timeSelectService.getMeridiem(this.componentConfig, time);\n    };\n    return TimeSelectComponent;\n}());\nvar CalendarNavComponent = /*@__PURE__*/ (function () {\n    function CalendarNavComponent() {\n        this.isLabelClickable = false;\n        this.showLeftNav = true;\n        this.showLeftSecondaryNav = false;\n        this.showRightNav = true;\n        this.showRightSecondaryNav = false;\n        this.leftNavDisabled = false;\n        this.leftSecondaryNavDisabled = false;\n        this.rightNavDisabled = false;\n        this.rightSecondaryNavDisabled = false;\n        this.showGoToCurrent = true;\n        this.onLeftNav = new EventEmitter();\n        this.onLeftSecondaryNav = new EventEmitter();\n        this.onRightNav = new EventEmitter();\n        this.onRightSecondaryNav = new EventEmitter();\n        this.onLabelClick = new EventEmitter();\n        this.onGoToCurrent = new EventEmitter();\n    }\n    /**\n     * @return {?}\n     */\n    CalendarNavComponent.prototype.leftNavClicked = function () {\n        this.onLeftNav.emit();\n    };\n    /**\n     * @return {?}\n     */\n    CalendarNavComponent.prototype.leftSecondaryNavClicked = function () {\n        this.onLeftSecondaryNav.emit();\n    };\n    /**\n     * @return {?}\n     */\n    CalendarNavComponent.prototype.rightNavClicked = function () {\n        this.onRightNav.emit();\n    };\n    /**\n     * @return {?}\n     */\n    CalendarNavComponent.prototype.rightSecondaryNavClicked = function () {\n        this.onRightSecondaryNav.emit();\n    };\n    /**\n     * @return {?}\n     */\n    CalendarNavComponent.prototype.labelClicked = function () {\n        this.onLabelClick.emit();\n    };\n    return CalendarNavComponent;\n}());\nvar DayTimeCalendarComponent = /*@__PURE__*/ (function () {\n    /**\n     * @param {?} dayTimeCalendarService\n     * @param {?} utilsService\n     * @param {?} cd\n     */\n    function DayTimeCalendarComponent(dayTimeCalendarService, utilsService, cd) {\n        this.dayTimeCalendarService = dayTimeCalendarService;\n        this.utilsService = utilsService;\n        this.cd = cd;\n        this.onChange = new EventEmitter();\n        this.onGoToCurrent = new EventEmitter();\n        this.onLeftNav = new EventEmitter();\n        this.onRightNav = new EventEmitter();\n        this.isInited = false;\n        this.api = {\n            moveCalendarTo: this.moveCalendarTo.bind(this)\n        };\n    }\n    Object.defineProperty(DayTimeCalendarComponent.prototype, \"selected\", {\n        /**\n         * @return {?}\n         */\n        get: function () {\n            return this._selected;\n        },\n        /**\n         * @param {?} selected\n         * @return {?}\n         */\n        set: function (selected) {\n            this._selected = selected;\n            this.onChangeCallback(this.processOnChangeCallback(selected));\n        },\n        enumerable: true,\n        configurable: true\n    });\n    /**\n     * @return {?}\n     */\n    DayTimeCalendarComponent.prototype.ngOnInit = function () {\n        this.isInited = true;\n        this.init();\n        this.initValidators();\n    };\n    /**\n     * @return {?}\n     */\n    DayTimeCalendarComponent.prototype.init = function () {\n        this.componentConfig = this.dayTimeCalendarService.getConfig(this.config);\n        this.inputValueType = this.utilsService.getInputType(this.inputValue, false);\n    };\n    /**\n     * @param {?} changes\n     * @return {?}\n     */\n    DayTimeCalendarComponent.prototype.ngOnChanges = function (changes) {\n        if (this.isInited) {\n            var minDate = changes.minDate, maxDate = changes.maxDate;\n            this.init();\n            if (minDate || maxDate) {\n                this.initValidators();\n            }\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DayTimeCalendarComponent.prototype.writeValue = function (value) {\n        this.inputValue = value;\n        if (value) {\n            this.selected = this.utilsService\n                .convertToMomentArray(value, this.componentConfig.format, false)[0];\n            this.inputValueType = this.utilsService\n                .getInputType(this.inputValue, false);\n        }\n        else {\n            this.selected = null;\n        }\n        this.cd.markForCheck();\n    };\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DayTimeCalendarComponent.prototype.registerOnChange = function (fn) {\n        this.onChangeCallback = fn;\n    };\n    /**\n     * @param {?} _\n     * @return {?}\n     */\n    DayTimeCalendarComponent.prototype.onChangeCallback = function (_) {\n    };\n    ;\n    /**\n     * @param {?} fn\n     * @return {?}\n     */\n    DayTimeCalendarComponent.prototype.registerOnTouched = function (fn) {\n    };\n    /**\n     * @param {?} formControl\n     * @return {?}\n     */\n    DayTimeCalendarComponent.prototype.validate = function (formControl) {\n        if (this.minDate || this.maxDate) {\n            return this.validateFn(formControl.value);\n        }\n        else {\n            return function () { return null; };\n        }\n    };\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    DayTimeCalendarComponent.prototype.processOnChangeCallback = function (value) {\n        return this.utilsService.convertFromMomentArray(this.componentConfig.format, [value], this.componentConfig.returnedValueType || this.inputValueType);\n    };\n    /**\n     * @return {?}\n     */\n    DayTimeCalendarComponent.prototype.initValidators = function () {\n        this.validateFn = this.utilsService.createValidator({\n            minDate: this.minDate,\n            maxDate: this.maxDate\n        }, undefined, 'daytime');\n        this.onChangeCallback(this.processOnChangeCallback(this.selected));\n    };\n    /**\n     * @param {?} day\n     * @return {?}\n     */\n    DayTimeCalendarComponent.prototype.dateSelected = function (day) {\n        this.selected = this.dayTimeCalendarService.updateDay(this.selected, day.date, this.config);\n        this.emitChange();\n    };\n    /**\n     * @param {?} time\n     * @return {?}\n     */\n    DayTimeCalendarComponent.prototype.timeChange = function (time) {\n        this.selected = this.dayTimeCalendarService.updateTime(this.selected, time.date);\n        this.emitChange();\n    };\n    /**\n     * @return {?}\n     */\n    DayTimeCalendarComponent.prototype.emitChange = function () {\n        this.onChange.emit({ date: this.selected, selected: false });\n    };\n    /**\n     * @param {?} to\n     * @return {?}\n     */\n    DayTimeCalendarComponent.prototype.moveCalendarTo = function (to) {\n        if (to) {\n            this.dayCalendarRef.moveCalendarTo(to);\n        }\n    };\n    /**\n     * @param {?} change\n     * @return {?}\n     */\n    DayTimeCalendarComponent.prototype.onLeftNavClick = function (change) {\n        this.onLeftNav.emit(change);\n    };\n    /**\n     * @param {?} change\n     * @return {?}\n     */\n    DayTimeCalendarComponent.prototype.onRightNavClick = function (change) {\n        this.onRightNav.emit(change);\n    };\n    return DayTimeCalendarComponent;\n}());\nvar DpDatePickerModule = /*@__PURE__*/ (function () {\n    function DpDatePickerModule() {\n    }\n    return DpDatePickerModule;\n}());\n/**\n * Generated bundle index. Do not edit.\n */\nexport { ECalendarMode, ECalendarValue, DatePickerComponent, DatePickerDirective, DayCalendarComponent, DayTimeCalendarComponent, TimeSelectComponent, MonthCalendarComponent, DpDatePickerModule, CalendarNavComponent as ɵi, DomHelper as ɵa, UtilsService as ɵb, DatePickerDirectiveService as ɵg, DatePickerService as ɵc, DayCalendarService as ɵf, DayTimeCalendarService as ɵe, MonthCalendarService as ɵh, TimeSelectService as ɵd };\n//# sourceMappingURL=ng2-date-picker.es5.js.map\n",null]}