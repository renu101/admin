{"remainingRequest":"/home/renu/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/renu/admin/node_modules/angular-async-local-storage/angular-async-local-storage.es5.js","dependencies":[{"path":"/home/renu/admin/node_modules/angular-async-local-storage/angular-async-local-storage.es5.js","mtime":1515100202000},{"path":"/home/renu/admin/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/renu/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Injectable, NgModule, PLATFORM_ID } from '@angular/core';\nimport { ReplaySubject } from 'rxjs/ReplaySubject';\nimport { first, map, mergeMap } from 'rxjs/operators';\nimport { fromEvent } from 'rxjs/observable/fromEvent';\nimport { of } from 'rxjs/observable/of';\nimport { _throw } from 'rxjs/observable/throw';\nimport { race } from 'rxjs/observable/race';\nimport { isPlatformBrowser } from '@angular/common';\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @abstract\n */\nvar AsyncLocalDatabase = /*@__PURE__*/ (function () {\n    function AsyncLocalDatabase() {\n    }\n    return AsyncLocalDatabase;\n}());\nvar __extends = (undefined && undefined.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar IndexedDBDatabase = /*@__PURE__*/ (function (_super) {\n    __extends(IndexedDBDatabase, _super);\n    /**\n     * Connects to IndexedDB\n     */\n    function IndexedDBDatabase() {\n        var _this = _super.call(this) || this;\n        /**\n         * IndexedDB database name for local storage\n         */\n        _this.dbName = 'ngStorage';\n        /**\n         * IndexedDB object store name for local storage\n         */\n        _this.objectStoreName = 'localStorage';\n        /**\n         * IndexedDB key path name for local storage (where an item's key will be stored)\n         */\n        _this.keyPath = 'key';\n        /**\n         * IndexedDB data path name for local storage (where items' value will be stored)\n         */\n        _this.dataPath = 'value';\n        /* Creating the RxJS ReplaySubject */\n        /* Creating the RxJS ReplaySubject */\n        _this.database = new ReplaySubject();\n        /* Connecting to IndexedDB */\n        /* Connecting to IndexedDB */\n        _this.connect();\n        return _this;\n    }\n    /**\n     * Gets an item value in local storage\n     * @param key The item's key\n     * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n     */\n    /**\n     * Gets an item value in local storage\n     * @template T\n     * @param {?} key The item's key\n     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n     */\n    IndexedDBDatabase.prototype.getItem = /**\n     * Gets an item value in local storage\n     * @template T\n     * @param {?} key The item's key\n     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n     */\n        function (key) {\n            var _this = this;\n            /* Opening a trasaction and requesting the item in local storage */\n            return this.transaction().pipe(map(function (transaction) { return transaction.get(key); }), mergeMap(function (request) {\n                /* Listening to the success event, and passing the item value if found, null otherwise */\n                var /** @type {?} */ success = ((fromEvent(request, 'success'))).pipe(map(function (event) { return ((event.target)).result; }), map(function (result) { return result && (_this.dataPath in result) ? ((result[_this.dataPath])) : null; }));\n                /* Merging success and errors events and autoclosing the observable */\n                return ((race(success, _this.toErrorObservable(request, \"getter\"))))\n                    .pipe(first());\n            }));\n        };\n    /**\n     * Sets an item in local storage\n     * @param key The item's key\n     * @param data The item's value, must NOT be null or undefined\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    /**\n     * Sets an item in local storage\n     * @param {?} key The item's key\n     * @param {?} data The item's value, must NOT be null or undefined\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n    IndexedDBDatabase.prototype.setItem = /**\n     * Sets an item in local storage\n     * @param {?} key The item's key\n     * @param {?} data The item's value, must NOT be null or undefined\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n        function (key, data) {\n            var _this = this;\n            /* Storing null is not correctly supported by IndexedDB and unnecessary here */\n            if (data == null) {\n                return of(true);\n            }\n            /* Opening a transaction and checking if the item already exists in local storage */\n            return this.getItem(key).pipe(map(function (existingData) { return (existingData == null) ? 'add' : 'put'; }), mergeMap(function (method) {\n                /* Opening a transaction */\n                return _this.transaction('readwrite').pipe(mergeMap(function (transaction) {\n                    var /** @type {?} */ request;\n                    /* Adding or updating local storage, based on previous checking */\n                    switch (method) {\n                        case 'add':\n                            request = transaction.add((_a = {}, _a[_this.dataPath] = data, _a), key);\n                            break;\n                        case 'put':\n                        default:\n                            request = transaction.put((_b = {}, _b[_this.dataPath] = data, _b), key);\n                            break;\n                    }\n                    /* Merging success (passing true) and error events and autoclosing the observable */\n                    return ((race(_this.toSuccessObservable(request), _this.toErrorObservable(request, \"setter\"))))\n                        .pipe(first());\n                    var _a, _b;\n                }));\n            }));\n        };\n    /**\n     * Deletes an item in local storage\n     * @param key The item's key\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    /**\n     * Deletes an item in local storage\n     * @param {?} key The item's key\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n    IndexedDBDatabase.prototype.removeItem = /**\n     * Deletes an item in local storage\n     * @param {?} key The item's key\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n        function (key) {\n            var _this = this;\n            /* Opening a transaction and checking if the item exists in local storage */\n            return this.getItem(key).pipe(mergeMap(function (data) {\n                /* If the item exists in local storage */\n                if (data != null) {\n                    /* Opening a transaction */\n                    return _this.transaction('readwrite').pipe(mergeMap(function (transaction) {\n                        /* Deleting the item in local storage */\n                        var /** @type {?} */ request = transaction.delete(key);\n                        /* Merging success (passing true) and error events and autoclosing the observable */\n                        return ((race(_this.toSuccessObservable(request), _this.toErrorObservable(request, \"remover\"))))\n                            .pipe(first());\n                    }));\n                }\n                /* Passing true if the item does not exist in local storage */\n                return of(true).pipe(first());\n            }));\n        };\n    /**\n     * Deletes all items from local storage\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    /**\n     * Deletes all items from local storage\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n    IndexedDBDatabase.prototype.clear = /**\n     * Deletes all items from local storage\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n        function () {\n            var _this = this;\n            /* Opening a transaction */\n            return this.transaction('readwrite').pipe(mergeMap(function (transaction) {\n                /* Deleting all items from local storage */\n                var /** @type {?} */ request = transaction.clear();\n                /* Merging success (passing true) and error events and autoclosing the observable */\n                return ((race(_this.toSuccessObservable(request), _this.toErrorObservable(request, \"clearer\"))))\n                    .pipe(first());\n            }));\n        };\n    /**\n     * Connects to IndexedDB and creates the object store on first time\n     */\n    /**\n     * Connects to IndexedDB and creates the object store on first time\n     * @return {?}\n     */\n    IndexedDBDatabase.prototype.connect = /**\n     * Connects to IndexedDB and creates the object store on first time\n     * @return {?}\n     */\n        function () {\n            var _this = this;\n            /* Connecting to IndexedDB */\n            var /** @type {?} */ request = indexedDB.open(this.dbName);\n            /* Listening the event fired on first connection, creating the object store for local storage */\n            ((fromEvent(request, 'upgradeneeded')))\n                .pipe(first())\n                .subscribe(function (event) {\n                /* Getting the database connection */\n                var /** @type {?} */ database = (((event.target)).result);\n                /* Checking if the object store already exists, to avoid error */\n                if (!database.objectStoreNames.contains(_this.objectStoreName)) {\n                    /* Creating the object store for local storage */\n                    database.createObjectStore(_this.objectStoreName);\n                }\n            });\n            /* Listening the success event and converting to an RxJS Observable */\n            var /** @type {?} */ success = (fromEvent(request, 'success'));\n            /* Merging success and errors events */\n            ((race(success, this.toErrorObservable(request, \"connection\"))))\n                .pipe(first())\n                .subscribe(function (event) {\n                /* Storing the database connection for further access */\n                /* Storing the database connection for further access */\n                _this.database.next(/** @type {?} */ (((event.target)).result));\n            }, function (error) {\n                _this.database.error(/** @type {?} */ (error));\n            });\n        };\n    /**\n     * Opens an IndexedDB transaction and gets the local storage object store\n     * @param mode Default to 'readonly' for read operations, or 'readwrite' for write operations\n     * @returns An IndexedDB transaction object store, wrapped in an RxJS Observable\n     */\n    /**\n     * Opens an IndexedDB transaction and gets the local storage object store\n     * @param {?=} mode Default to 'readonly' for read operations, or 'readwrite' for write operations\n     * @return {?} An IndexedDB transaction object store, wrapped in an RxJS Observable\n     */\n    IndexedDBDatabase.prototype.transaction = /**\n     * Opens an IndexedDB transaction and gets the local storage object store\n     * @param {?=} mode Default to 'readonly' for read operations, or 'readwrite' for write operations\n     * @return {?} An IndexedDB transaction object store, wrapped in an RxJS Observable\n     */\n        function (mode) {\n            var _this = this;\n            if (mode === void 0) {\n                mode = 'readonly';\n            }\n            /* From the IndexedDB connection, opening a transaction and getting the local storage objet store */\n            return this.database\n                .pipe(map(function (database) { return database.transaction([_this.objectStoreName], mode).objectStore(_this.objectStoreName); }));\n        };\n    /**\n     * Transforms a IndexedDB success event in an RxJS Observable\n     * @param request The request to listen\n     * @returns A RxJS Observable with true value\n     */\n    /**\n     * Transforms a IndexedDB success event in an RxJS Observable\n     * @param {?} request The request to listen\n     * @return {?} A RxJS Observable with true value\n     */\n    IndexedDBDatabase.prototype.toSuccessObservable = /**\n     * Transforms a IndexedDB success event in an RxJS Observable\n     * @param {?} request The request to listen\n     * @return {?} A RxJS Observable with true value\n     */\n        function (request) {\n            /* Transforming a IndexedDB success event in an RxJS Observable with true value */\n            return ((fromEvent(request, 'success')))\n                .pipe(map(function () { return true; }));\n        };\n    /**\n     * Transforms a IndexedDB error event in an RxJS ErrorObservable\n     * @param request The request to listen\n     * @param error Optionnal details about the error's origin\n     * @returns A RxJS ErrorObservable\n     */\n    /**\n     * Transforms a IndexedDB error event in an RxJS ErrorObservable\n     * @param {?} request The request to listen\n     * @param {?=} error Optionnal details about the error's origin\n     * @return {?} A RxJS ErrorObservable\n     */\n    IndexedDBDatabase.prototype.toErrorObservable = /**\n     * Transforms a IndexedDB error event in an RxJS ErrorObservable\n     * @param {?} request The request to listen\n     * @param {?=} error Optionnal details about the error's origin\n     * @return {?} A RxJS ErrorObservable\n     */\n        function (request, error) {\n            if (error === void 0) {\n                error = \"\";\n            }\n            /* Transforming a IndexedDB error event in an RxJS ErrorObservable */\n            return ((fromEvent(request, 'error')))\n                .pipe(mergeMap(function (event) { return _throw(new Error(\"IndexedDB \" + error + \" issue : \" + request.error.message + \".\")); }));\n        };\n    return IndexedDBDatabase;\n}(AsyncLocalDatabase));\nvar __extends$1 = (undefined && undefined.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar LocalStorageDatabase = (function (_super) {\n    __extends$1(LocalStorageDatabase, _super);\n    function LocalStorageDatabase() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        /* Initializing native localStorage right now to be able to check its support on class instanciation */\n        _this.localStorage = localStorage;\n        return _this;\n    }\n    /**\n     * Gets an item value in local storage\n     * @param key The item's key\n     * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n     */\n    /**\n     * Gets an item value in local storage\n     * @template T\n     * @param {?} key The item's key\n     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n     */\n    LocalStorageDatabase.prototype.getItem = /**\n     * Gets an item value in local storage\n     * @template T\n     * @param {?} key The item's key\n     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n     */\n        function (key) {\n            var /** @type {?} */ unparsedData = this.localStorage.getItem(key);\n            var /** @type {?} */ parsedData = null;\n            if (unparsedData != null) {\n                try {\n                    parsedData = JSON.parse(unparsedData);\n                }\n                catch (error) {\n                    return _throw(new Error(\"Invalid data in localStorage.\"));\n                }\n            }\n            return of(parsedData);\n        };\n    /**\n     * Sets an item in local storage\n     * @param key The item's key\n     * @param data The item's value, must NOT be null or undefined\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    /**\n     * Sets an item in local storage\n     * @param {?} key The item's key\n     * @param {?} data The item's value, must NOT be null or undefined\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n    LocalStorageDatabase.prototype.setItem = /**\n     * Sets an item in local storage\n     * @param {?} key The item's key\n     * @param {?} data The item's value, must NOT be null or undefined\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n        function (key, data) {\n            this.localStorage.setItem(key, JSON.stringify(data));\n            return of(true);\n        };\n    /**\n     * Deletes an item in local storage\n     * @param key The item's key\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    /**\n     * Deletes an item in local storage\n     * @param {?} key The item's key\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n    LocalStorageDatabase.prototype.removeItem = /**\n     * Deletes an item in local storage\n     * @param {?} key The item's key\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n        function (key) {\n            this.localStorage.removeItem(key);\n            return of(true);\n        };\n    /**\n     * Deletes all items from local storage\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    /**\n     * Deletes all items from local storage\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n    LocalStorageDatabase.prototype.clear = /**\n     * Deletes all items from local storage\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n        function () {\n            this.localStorage.clear();\n            return of(true);\n        };\n    return LocalStorageDatabase;\n}(AsyncLocalDatabase));\nvar __extends$2 = (undefined && undefined.__extends) || (function () {\n    var extendStatics = Object.setPrototypeOf ||\n        ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||\n        function (d, b) { for (var p in b)\n            if (b.hasOwnProperty(p))\n                d[p] = b[p]; };\n    return function (d, b) {\n        extendStatics(d, b);\n        function __() { this.constructor = d; }\n        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());\n    };\n})();\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\nvar MockLocalDatabase = (function (_super) {\n    __extends$2(MockLocalDatabase, _super);\n    function MockLocalDatabase() {\n        var _this = _super !== null && _super.apply(this, arguments) || this;\n        _this.localStorage = new Map();\n        return _this;\n    }\n    /**\n     * Gets an item value in local storage\n     * @param key The item's key\n     * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n     */\n    /**\n     * Gets an item value in local storage\n     * @template T\n     * @param {?} key The item's key\n     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n     */\n    MockLocalDatabase.prototype.getItem = /**\n     * Gets an item value in local storage\n     * @template T\n     * @param {?} key The item's key\n     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n     */\n        function (key) {\n            var /** @type {?} */ rawData = this.localStorage.get(key);\n            return of((rawData !== undefined) ? rawData : null);\n        };\n    /**\n     * Sets an item in local storage\n     * @param key The item's key\n     * @param data The item's value, must NOT be null or undefined\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    /**\n     * Sets an item in local storage\n     * @param {?} key The item's key\n     * @param {?} data The item's value, must NOT be null or undefined\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n    MockLocalDatabase.prototype.setItem = /**\n     * Sets an item in local storage\n     * @param {?} key The item's key\n     * @param {?} data The item's value, must NOT be null or undefined\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n        function (key, data) {\n            this.localStorage.set(key, data);\n            return of(true);\n        };\n    /**\n     * Deletes an item in local storage\n     * @param key The item's key\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    /**\n     * Deletes an item in local storage\n     * @param {?} key The item's key\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n    MockLocalDatabase.prototype.removeItem = /**\n     * Deletes an item in local storage\n     * @param {?} key The item's key\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n        function (key) {\n            this.localStorage.delete(key);\n            return of(true);\n        };\n    /**\n     * Deletes all items from local storage\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    /**\n     * Deletes all items from local storage\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n    MockLocalDatabase.prototype.clear = /**\n     * Deletes all items from local storage\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n        function () {\n            this.localStorage.clear();\n            return of(true);\n        };\n    return MockLocalDatabase;\n}(AsyncLocalDatabase));\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * \\@todo Add other JSON Schema validation features\n */\nvar JSONValidator = /*@__PURE__*/ (function () {\n    function JSONValidator() {\n        this.simpleTypes = ['string', 'number', 'boolean', 'object'];\n    }\n    /**\n     * @param {?} value\n     * @return {?}\n     */\n    JSONValidator.prototype.isObjectNotNull = /**\n     * @param {?} value\n     * @return {?}\n     */\n        function (value) {\n            return (value !== null) && (typeof value === 'object');\n        };\n    /**\n     * Validate a JSON data against a JSON Schema\n     * @param data JSON data to validate\n     * @param schema Subset of JSON Schema\n     * @returns If data is valid : true, if it is invalid : false, and throws if the schema is invalid\n     */\n    /**\n     * Validate a JSON data against a JSON Schema\n     * @param {?} data JSON data to validate\n     * @param {?} schema Subset of JSON Schema\n     * @return {?} If data is valid : true, if it is invalid : false, and throws if the schema is invalid\n     */\n    JSONValidator.prototype.validate = /**\n     * Validate a JSON data against a JSON Schema\n     * @param {?} data JSON data to validate\n     * @param {?} schema Subset of JSON Schema\n     * @return {?} If data is valid : true, if it is invalid : false, and throws if the schema is invalid\n     */\n        function (data, schema) {\n            if (!this.isObjectNotNull(schema)) {\n                throw new Error(\"A schema must be an object (unlike spec, booleans are not supported to enforce strict types).\");\n            }\n            if ((!schema.hasOwnProperty('type') || schema.type === 'array' || schema.type === 'object')\n                && !schema.hasOwnProperty('properties') && !schema.hasOwnProperty('items')) {\n                throw new Error(\"Each value must have a 'type' or 'properties' or 'items', to enforce strict types.\");\n            }\n            if (schema.hasOwnProperty('type') && !this.validateType(data, schema)) {\n                return false;\n            }\n            if (schema.hasOwnProperty('items') && !this.validateItems(data, schema)) {\n                return false;\n            }\n            if (schema.hasOwnProperty('properties')) {\n                if (schema.hasOwnProperty('required') && !this.validateRequired(data, schema)) {\n                    return false;\n                }\n                if (!this.validateProperties(data, schema)) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    /**\n     * @param {?} data\n     * @param {?} schema\n     * @return {?}\n     */\n    JSONValidator.prototype.validateProperties = /**\n     * @param {?} data\n     * @param {?} schema\n     * @return {?}\n     */\n        function (data, schema) {\n            if (!this.isObjectNotNull(data)) {\n                return false;\n            }\n            if (!schema.properties || !this.isObjectNotNull(schema.properties)) {\n                throw new Error(\"'properties' must be a schema object.\");\n            }\n            /**\n                 * Check if the object doesn't have more properties than expected\n                 * Equivalent of additionalProperties: false\n                 */\n            if (Object.keys(schema.properties).length !== Object.keys(data).length) {\n                return false;\n            }\n            /* Recursively validate all properties */\n            for (var /** @type {?} */ property in schema.properties) {\n                if (schema.properties.hasOwnProperty(property) && data.hasOwnProperty(property)) {\n                    if (!this.validate(data[property], schema.properties[property])) {\n                        return false;\n                    }\n                }\n            }\n            return true;\n        };\n    /**\n     * @param {?} data\n     * @param {?} schema\n     * @return {?}\n     */\n    JSONValidator.prototype.validateRequired = /**\n     * @param {?} data\n     * @param {?} schema\n     * @return {?}\n     */\n        function (data, schema) {\n            if (!this.isObjectNotNull(data)) {\n                return false;\n            }\n            if (!Array.isArray(schema.required)) {\n                throw new Error(\"'required' field must be an array. Note that since JSON Schema draft 6, booleans are not supported anymore.\");\n            }\n            for (var _i = 0, _a = schema.required; _i < _a.length; _i++) {\n                var requiredProp = _a[_i];\n                if (typeof requiredProp !== 'string') {\n                    throw new Error(\"'required' array must contain strings only.\");\n                }\n                /* Checks if the property is present in the schema 'properties' */\n                if (!schema.properties || !schema.properties.hasOwnProperty(requiredProp)) {\n                    throw new Error(\"'required' properties must be described in 'properties' too.\");\n                }\n                /* Checks if the property is present in the data */\n                if (!data.hasOwnProperty(requiredProp)) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    /**\n     * @param {?} data\n     * @param {?} schema\n     * @return {?}\n     */\n    JSONValidator.prototype.validateType = /**\n     * @param {?} data\n     * @param {?} schema\n     * @return {?}\n     */\n        function (data, schema) {\n            if (Array.isArray(schema.type)) {\n                return this.validateTypeList(data, schema);\n            }\n            if (typeof schema.type !== 'string') {\n                throw new Error(\"'type' must be a string (arrays of types are not supported yet).\");\n            }\n            if ((schema.type === 'null') && (data !== null)) {\n                return false;\n            }\n            if ((this.simpleTypes.indexOf(schema.type) !== -1) && (typeof data !== schema.type)) {\n                return false;\n            }\n            if ((schema.type === 'integer') && ((typeof data !== 'number') || !Number.isInteger(data))) {\n                return false;\n            }\n            return true;\n        };\n    /**\n     * @param {?} data\n     * @param {?} schema\n     * @return {?}\n     */\n    JSONValidator.prototype.validateTypeList = /**\n     * @param {?} data\n     * @param {?} schema\n     * @return {?}\n     */\n        function (data, schema) {\n            var /** @type {?} */ types = (schema.type);\n            var /** @type {?} */ typesTests = [];\n            for (var _i = 0, types_1 = types; _i < types_1.length; _i++) {\n                var type = types_1[_i];\n                typesTests.push(this.validateType(data, { type: type }));\n            }\n            return (typesTests.indexOf(true) !== -1);\n        };\n    /**\n     * @param {?} data\n     * @param {?} schema\n     * @return {?}\n     */\n    JSONValidator.prototype.validateItems = /**\n     * @param {?} data\n     * @param {?} schema\n     * @return {?}\n     */\n        function (data, schema) {\n            if (!Array.isArray(data)) {\n                return false;\n            }\n            if (Array.isArray(schema.items)) {\n                return this.validateItemsList(data, schema);\n            }\n            if (!schema.items || !this.isObjectNotNull(schema.items)) {\n                throw new Error(\"'items' must be a schema object.\");\n            }\n            for (var _i = 0, data_1 = data; _i < data_1.length; _i++) {\n                var value = data_1[_i];\n                if (!this.validate(value, schema.items)) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    /**\n     * @param {?} data\n     * @param {?} schema\n     * @return {?}\n     */\n    JSONValidator.prototype.validateItemsList = /**\n     * @param {?} data\n     * @param {?} schema\n     * @return {?}\n     */\n        function (data, schema) {\n            var /** @type {?} */ items = (schema.items);\n            if (data.length !== items.length) {\n                return false;\n            }\n            for (var /** @type {?} */ i = 0; i < items.length; i += 1) {\n                if (!this.validate(data[i], items[i])) {\n                    return false;\n                }\n            }\n            return true;\n        };\n    return JSONValidator;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @record\n */\nvar AsyncLocalStorage = /*@__PURE__*/ (function () {\n    function AsyncLocalStorage(database, jsonValidator) {\n        this.database = database;\n        this.jsonValidator = jsonValidator;\n        this.getItemOptionsDefault = {\n            schema: null\n        };\n    }\n    /**\n     * Gets an item value in local storage\n     * @param key The item's key\n     * @returns The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n     */\n    /**\n     * Gets an item value in local storage\n     * @template T\n     * @param {?} key The item's key\n     * @param {?=} options\n     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n     */\n    AsyncLocalStorage.prototype.getItem = /**\n     * Gets an item value in local storage\n     * @template T\n     * @param {?} key The item's key\n     * @param {?=} options\n     * @return {?} The item's value if the key exists, null otherwise, wrapped in an RxJS Observable\n     */\n        function (key, options) {\n            var _this = this;\n            if (options === void 0) {\n                options = this.getItemOptionsDefault;\n            }\n            return this.database.getItem(key).pipe(/* Validate data upon a json schema if requested */ mergeMap(function (data) {\n                if (options.schema && data !== null) {\n                    var /** @type {?} */ validation = true;\n                    try {\n                        validation = _this.jsonValidator.validate(data, options.schema);\n                    }\n                    catch (error) {\n                        return _throw(error);\n                    }\n                    if (!validation) {\n                        return _throw(new Error(\"JSON invalid\"));\n                    }\n                }\n                return of(data);\n            }));\n        };\n    /**\n     * Sets an item in local storage\n     * @param key The item's key\n     * @param data The item's value, must NOT be null or undefined\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    /**\n     * Sets an item in local storage\n     * @param {?} key The item's key\n     * @param {?} data The item's value, must NOT be null or undefined\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n    AsyncLocalStorage.prototype.setItem = /**\n     * Sets an item in local storage\n     * @param {?} key The item's key\n     * @param {?} data The item's value, must NOT be null or undefined\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n        function (key, data) {\n            return this.database.setItem(key, data);\n        };\n    /**\n     * Deletes an item in local storage\n     * @param key The item's key\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    /**\n     * Deletes an item in local storage\n     * @param {?} key The item's key\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n    AsyncLocalStorage.prototype.removeItem = /**\n     * Deletes an item in local storage\n     * @param {?} key The item's key\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n        function (key) {\n            return this.database.removeItem(key);\n        };\n    /**\n     * Deletes all items from local storage\n     * @returns An RxJS Observable to wait the end of the operation\n     */\n    /**\n     * Deletes all items from local storage\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n    AsyncLocalStorage.prototype.clear = /**\n     * Deletes all items from local storage\n     * @return {?} An RxJS Observable to wait the end of the operation\n     */\n        function () {\n            return this.database.clear();\n        };\n    return AsyncLocalStorage;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @param {?} platformId\n * @return {?}\n */\nfunction databaseFactory(platformId) {\n    if (isPlatformBrowser(platformId) && ('indexedDB' in window)) {\n        /* Try with IndexedDB in modern browsers */\n        return new IndexedDBDatabase();\n    }\n    else if (isPlatformBrowser(platformId) && ('localStorage' in window)) {\n        /* Try with localStorage in old browsers (IE9) */\n        return new LocalStorageDatabase();\n    }\n    else {\n        /* Fake database for server-side rendering (Universal) */\n        return new MockLocalDatabase();\n    }\n}\nvar AsyncLocalStorageModule = /*@__PURE__*/ (function () {\n    function AsyncLocalStorageModule() {\n    }\n    return AsyncLocalStorageModule;\n}());\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * @fileoverview added by tsickle\n * @suppress {checkTypes} checked by tsc\n */\n/**\n * Generated bundle index. Do not edit.\n */\nexport { AsyncLocalDatabase, IndexedDBDatabase, LocalStorageDatabase, MockLocalDatabase, JSONValidator, AsyncLocalStorage, AsyncLocalStorageModule, databaseFactory as ɵa };\n//# sourceMappingURL=angular-async-local-storage.es5.js.map\n",null]}