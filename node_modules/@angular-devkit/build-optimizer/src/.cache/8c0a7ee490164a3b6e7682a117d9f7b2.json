{"remainingRequest":"/home/renu/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/renu/admin/node_modules/ng2-smart-table/lib/data-set/data-set.js","dependencies":[{"path":"/home/renu/admin/node_modules/ng2-smart-table/lib/data-set/data-set.js","mtime":1505225756000},{"path":"/home/renu/admin/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/renu/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { Row } from './row';\nimport { Column } from './column';\nvar DataSet = /*@__PURE__*/ (function () {\n    function DataSet(data, columnSettings) {\n        if (data === void 0) {\n            data = [];\n        }\n        this.columnSettings = columnSettings;\n        this.data = [];\n        this.columns = [];\n        this.rows = [];\n        this.willSelect = 'first';\n        this.createColumns(columnSettings);\n        this.setData(data);\n        this.createNewRow();\n    }\n    DataSet.prototype.setData = function (data) {\n        this.data = data;\n        this.createRows();\n    };\n    DataSet.prototype.getColumns = function () {\n        return this.columns;\n    };\n    DataSet.prototype.getRows = function () {\n        return this.rows;\n    };\n    DataSet.prototype.getFirstRow = function () {\n        return this.rows[0];\n    };\n    DataSet.prototype.getLastRow = function () {\n        return this.rows[this.rows.length - 1];\n    };\n    DataSet.prototype.findRowByData = function (data) {\n        return this.rows.find(function (row) { return row.getData() === data; });\n    };\n    DataSet.prototype.deselectAll = function () {\n        this.rows.forEach(function (row) {\n            row.isSelected = false;\n        });\n    };\n    DataSet.prototype.selectRow = function (row) {\n        var previousIsSelected = row.isSelected;\n        this.deselectAll();\n        row.isSelected = !previousIsSelected;\n        this.selectedRow = row;\n        return this.selectedRow;\n    };\n    DataSet.prototype.multipleSelectRow = function (row) {\n        row.isSelected = !row.isSelected;\n        this.selectedRow = row;\n        return this.selectedRow;\n    };\n    DataSet.prototype.selectPreviousRow = function () {\n        if (this.rows.length > 0) {\n            var index = this.selectedRow ? this.selectedRow.index : 0;\n            if (index > this.rows.length - 1) {\n                index = this.rows.length - 1;\n            }\n            this.selectRow(this.rows[index]);\n            return this.selectedRow;\n        }\n    };\n    DataSet.prototype.selectFirstRow = function () {\n        if (this.rows.length > 0) {\n            this.selectRow(this.rows[0]);\n            return this.selectedRow;\n        }\n    };\n    DataSet.prototype.selectLastRow = function () {\n        if (this.rows.length > 0) {\n            this.selectRow(this.rows[this.rows.length - 1]);\n            return this.selectedRow;\n        }\n    };\n    DataSet.prototype.willSelectFirstRow = function () {\n        this.willSelect = 'first';\n    };\n    DataSet.prototype.willSelectLastRow = function () {\n        this.willSelect = 'last';\n    };\n    DataSet.prototype.select = function () {\n        if (this.getRows().length === 0) {\n            return;\n        }\n        if (this.willSelect) {\n            if (this.willSelect === 'first') {\n                this.selectFirstRow();\n            }\n            if (this.willSelect === 'last') {\n                this.selectLastRow();\n            }\n            this.willSelect = '';\n        }\n        else {\n            this.selectFirstRow();\n        }\n        return this.selectedRow;\n    };\n    DataSet.prototype.createNewRow = function () {\n        this.newRow = new Row(-1, {}, this);\n        this.newRow.isInEditing = true;\n    };\n    /**\n     * Create columns by mapping from the settings\n     * @param settings\n     * @private\n     */\n    DataSet.prototype.createColumns = function (settings) {\n        for (var id in settings) {\n            if (settings.hasOwnProperty(id)) {\n                this.columns.push(new Column(id, settings[id], this));\n            }\n        }\n    };\n    /**\n     * Create rows based on current data prepared in data source\n     * @private\n     */\n    DataSet.prototype.createRows = function () {\n        var _this = this;\n        this.rows = [];\n        this.data.forEach(function (el, index) {\n            _this.rows.push(new Row(index, el, _this));\n        });\n    };\n    return DataSet;\n}());\nexport { DataSet };\n//# sourceMappingURL=data-set.js.map \n",null]}