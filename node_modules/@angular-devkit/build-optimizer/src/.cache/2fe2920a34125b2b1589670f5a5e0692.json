{"remainingRequest":"/home/renu/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js??ref--3-1!/home/renu/admin/node_modules/ngx-webstorage/dist/helpers/keyStorage.js","dependencies":[{"path":"/home/renu/admin/node_modules/ngx-webstorage/dist/helpers/keyStorage.js","mtime":1512224934000},{"path":"/home/renu/admin/node_modules/cache-loader/dist/cjs.js","mtime":0},{"path":"/home/renu/admin/node_modules/@angular-devkit/build-optimizer/src/build-optimizer/webpack-loader.js","mtime":1519266497000}],"contextDependencies":[],"result":["import { LIB_KEY, LIB_KEY_CASE_SENSITIVE, LIB_KEY_SEPARATOR } from '../constants/lib';\nvar CUSTOM_LIB_KEY = LIB_KEY;\nvar CUSTOM_LIB_KEY_SEPARATOR = LIB_KEY_SEPARATOR;\nvar CUSTOM_LIB_KEY_CASE_SENSITIVE = LIB_KEY_CASE_SENSITIVE;\nexport function isManagedKey(sKey) {\n    return sKey.indexOf(CUSTOM_LIB_KEY + CUSTOM_LIB_KEY_SEPARATOR) === 0;\n}\nvar KeyStorageHelper = /*@__PURE__*/ (function () {\n    function KeyStorageHelper() {\n    }\n    KeyStorageHelper.isManagedKey = function (sKey) {\n        return sKey.indexOf(CUSTOM_LIB_KEY + CUSTOM_LIB_KEY_SEPARATOR) === 0;\n    };\n    KeyStorageHelper.retrieveKeysFromStorage = function (storage) {\n        return Object.keys(storage).filter(isManagedKey);\n    };\n    KeyStorageHelper.genKey = function (raw) {\n        if (typeof raw !== 'string')\n            throw Error('attempt to generate a storage key with a non string value');\n        return \"\" + CUSTOM_LIB_KEY + CUSTOM_LIB_KEY_SEPARATOR + this.formatKey(raw);\n    };\n    KeyStorageHelper.formatKey = function (raw) {\n        var key = raw.toString();\n        return CUSTOM_LIB_KEY_CASE_SENSITIVE ? key : key.toLowerCase();\n    };\n    KeyStorageHelper.setStorageKeyPrefix = function (key) {\n        if (key === void 0) {\n            key = LIB_KEY;\n        }\n        CUSTOM_LIB_KEY = key;\n    };\n    KeyStorageHelper.setCaseSensitivity = function (enable) {\n        if (enable === void 0) {\n            enable = LIB_KEY_CASE_SENSITIVE;\n        }\n        CUSTOM_LIB_KEY_CASE_SENSITIVE = enable;\n    };\n    KeyStorageHelper.setStorageKeySeparator = function (separator) {\n        if (separator === void 0) {\n            separator = LIB_KEY_SEPARATOR;\n        }\n        CUSTOM_LIB_KEY_SEPARATOR = separator;\n    };\n    return KeyStorageHelper;\n}());\nexport { KeyStorageHelper };\n//# sourceMappingURL=keyStorage.js.map \n",null]}